package vistaPanelApus;

import controlador.equipoController;
import controlador.manoObraController;
import java.awt.event.KeyEvent;
import java.awt.event.MouseEvent;
import java.math.RoundingMode;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JScrollPane;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import util.validaciones;
import vistaPanelApusDialog.dialogEquipo;
import vistaPanelApusDialog.dialogManoObra;
import vistaPanelApusDialog.dialogMateriales;
import vistaPanelApusDialog.dialogRendimiento;
import static vistaPanelApusDialog.dialogRendimiento.jTextField1;
import vistaPanelApusDialog.dialogTransporte;

import java.text.DecimalFormat;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import modelo.Equipo;
import modelo.ManoObra;
import sun.swing.table.DefaultTableCellHeaderRenderer;

/**
 *
 * @author Jonathan
 */
public class panelApus extends javax.swing.JPanel {

    /**
     * Creates new form panelApus
     */
    // objeto de todo los dialogos
    dialogEquipo dlgequipo;
    dialogRendimiento dlgrendimiento;
    dialogManoObra dlgManoObra;
    dialogMateriales dlgMateriales;
    dialogTransporte dlgTransporte;

    // control on/off de los dialogs
    public static boolean activoDlgEquipo, activoDlgRendimiento, activoDlgManoObra, activoDlgMateriales, activoDlgTransporte;

    // variable para caracter
    private Character kpress;

    // instancia de validaciones
    final private validaciones validacion;

    // control de numero de decimales
    final String squema[] = {"#.##", "#.###", "#.####", "#.#####", "#.######", "#.#####"};
    DecimalFormat df;

    private equipoController ctrEquip = new equipoController();
    manoObraController ctrManObra = new manoObraController();

    public panelApus() {
        validacion = new validaciones();
        initComponents();

        setTablesNoMoveHeader(); // 
        setNoEditableTextField(); //
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableE = new javax.swing.JTable();
        jTextField3 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tableM = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tableMa = new javax.swing.JTable();
        jLabel7 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        tableT = new javax.swing.JTable();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        btnAddE = new javax.swing.JButton();
        btnDelE = new javax.swing.JButton();
        btnAddM = new javax.swing.JButton();
        btnDelM = new javax.swing.JButton();
        btnAddMa = new javax.swing.JButton();
        btnDelMa = new javax.swing.JButton();
        btnAddT = new javax.swing.JButton();
        btnDelT = new javax.swing.JButton();
        jLabel17 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txtSubEq = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jTextField9 = new javax.swing.JTextField();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();
        jTextField14 = new javax.swing.JTextField();
        jTextField15 = new javax.swing.JTextField();
        jTextField16 = new javax.swing.JTextField();
        jTextField17 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTextField18 = new javax.swing.JTextField();
        jTextField19 = new javax.swing.JTextField();
        jTextField20 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        cboDecimales = new javax.swing.JComboBox<>();

        jTextField1.setText("CONSTRUDIPRO S.A.");

        jTextField2.setText("HOSPITAL GENERAL DE 120 CAMAS DE CHONE TIPO COSTA");

        tableE.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><center>DESCRIPCION<br><b>A</b></center></htlm>", "<html><center>CANTIDAD<br><b>B</b></center></htlm>", "<html><center>TARIFA<br><b>C</b></center></htlm>", "<html><center>COSTO HORA<br><b>D= B*C</b></center></htlm>", "<html><center>RENDIMIENTO<br><b>E</b></center></htlm>", "<html><center>COST UNIT<br><b>F= D*E</b></center></htlm>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableE.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableEKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                tableEKeyTyped(evt);
            }
        });
        jScrollPane1.setViewportView(tableE);
        if (tableE.getColumnModel().getColumnCount() > 0) {
            tableE.getColumnModel().getColumn(0).setPreferredWidth(255);
            tableE.getColumnModel().getColumn(0).setMaxWidth(255);
            tableE.getColumnModel().getColumn(1).setPreferredWidth(70);
            tableE.getColumnModel().getColumn(1).setMaxWidth(70);
            tableE.getColumnModel().getColumn(2).setPreferredWidth(58);
            tableE.getColumnModel().getColumn(2).setMaxWidth(58);
            tableE.getColumnModel().getColumn(3).setPreferredWidth(85);
            tableE.getColumnModel().getColumn(3).setMaxWidth(85);
            tableE.getColumnModel().getColumn(4).setPreferredWidth(85);
            tableE.getColumnModel().getColumn(4).setMaxWidth(85);
            tableE.getColumnModel().getColumn(5).setPreferredWidth(100);
            tableE.getColumnModel().getColumn(5).setMaxWidth(100);
        }

        jTextField3.setText("ANALISIS DE PRECIOS UNITARIOS");

        jLabel1.setText("Rubro: ");

        jTextField4.setText("jTextField4");

        jLabel2.setText("Unidad:");

        jTextField5.setText("jTextField5");

        jLabel3.setText("Detalle:");

        jTextField6.setText("jTextField6");

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("1. Equipos");

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel5.setText("2. Mano de Obra");

        tableM.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><center>DESCRIPCION<br><b>A</b></center></html>", "<html><center>CANTIDAD<br><b>B</b></center></html>", "<html><center>JOR REAL/HOR<br><b>C</b></center></html>", "<html><center>COSTO HORA<br><b>D= B*C</b></center></html>", "<html><center>Rendimiento<br><b>E</b></center></html>", "<html><center>COST UNIT<br><b>F= D*E</b></center></html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, true, false, false, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableM.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableMKeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(tableM);
        if (tableM.getColumnModel().getColumnCount() > 0) {
            tableM.getColumnModel().getColumn(0).setPreferredWidth(255);
            tableM.getColumnModel().getColumn(0).setMaxWidth(255);
            tableM.getColumnModel().getColumn(1).setPreferredWidth(65);
            tableM.getColumnModel().getColumn(1).setMaxWidth(65);
        }

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel6.setText("3. Materiales");

        tableMa.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><center>DESCRIPCION<br><b>A</b></center></html>", "<html><center>UNIDAD<br><b>B</b></center></html>", "<html><center>CANTIDAD<br><b>C</b></center></html>", "<html><center>PRECIO UNIT<br><b>D</b></center></html>", "<html><center>COST UNIT<br><b>E= C*D</b></center></html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableMa.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableMaKeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(tableMa);
        if (tableMa.getColumnModel().getColumnCount() > 0) {
            tableMa.getColumnModel().getColumn(0).setPreferredWidth(250);
            tableMa.getColumnModel().getColumn(0).setMaxWidth(250);
            tableMa.getColumnModel().getColumn(1).setPreferredWidth(80);
            tableMa.getColumnModel().getColumn(1).setMaxWidth(80);
            tableMa.getColumnModel().getColumn(2).setPreferredWidth(80);
            tableMa.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("4. Transporte");

        tableT.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><center>DESCRIPCION<br><b>A</b></center></html>", "<html><center>UNIDAD<br><b>B</b></center></html>", "<html><center>CANTIDAD<br><b>C</b></center></html>", "<html><center>TARIFA<br><b>D</b></center></html>", "<html><center>COSTO UNIT<br><b>E= C*D</b></center></html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, true, true, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tableT.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableTKeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(tableT);
        if (tableT.getColumnModel().getColumnCount() > 0) {
            tableT.getColumnModel().getColumn(0).setPreferredWidth(250);
            tableT.getColumnModel().getColumn(0).setMaxWidth(250);
            tableT.getColumnModel().getColumn(1).setPreferredWidth(80);
            tableT.getColumnModel().getColumn(1).setMaxWidth(80);
            tableT.getColumnModel().getColumn(2).setPreferredWidth(80);
            tableT.getColumnModel().getColumn(2).setMaxWidth(80);
        }

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel9.setText("COSTO DIRECTO");

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("INDIRECTOS Y UTILIDADES");

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("OTROS INDIRECTOS");

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("COSTO TOTAL DEL RUBRO");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("VALOR OFERTA");

        jLabel14.setText("ESTOS PRECIOS NO INCLUYEN I.V.A.");

        jLabel15.setText("Empresa: ");

        jLabel16.setText("Proyecto: ");

        btnAddE.setText("Agregar");
        btnAddE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddEActionPerformed(evt);
            }
        });

        btnDelE.setText("Eliminar");
        btnDelE.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelEActionPerformed(evt);
            }
        });

        btnAddM.setText("Agregar");
        btnAddM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMActionPerformed(evt);
            }
        });

        btnDelM.setText("Eliminar");
        btnDelM.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelMActionPerformed(evt);
            }
        });

        btnAddMa.setText("Agregar");
        btnAddMa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddMaActionPerformed(evt);
            }
        });

        btnDelMa.setText("Eliminar");
        btnDelMa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelMaActionPerformed(evt);
            }
        });

        btnAddT.setText("Agregar");
        btnAddT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTActionPerformed(evt);
            }
        });

        btnDelT.setText("Eliminar");
        btnDelT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDelTActionPerformed(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel17.setText("Equipo Subtotal: $");

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel20.setText("Mano de Obra Subtotal: $");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel21.setText("Materiales Subtotal: $");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel23.setText("Transporte Subtotal: $");

        txtSubEq.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        txtSubEq.setText("0.0");
        txtSubEq.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSubEqMouseClicked(evt);
            }
        });

        jTextField8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField8.setText("0.0");
        jTextField8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField8MouseClicked(evt);
            }
        });

        jTextField9.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField9.setText("0.0");
        jTextField9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField9MouseClicked(evt);
            }
        });

        jTextField10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jTextField10.setText("0.0");
        jTextField10.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField10MouseClicked(evt);
            }
        });
        jTextField10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField10ActionPerformed(evt);
            }
        });

        jTextField11.setText("0.0");
        jTextField11.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextField11MouseClicked(evt);
            }
        });

        jTextField12.setText("0.0");
        jTextField12.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField12KeyPressed(evt);
            }
        });

        jTextField13.setText("0.0");

        jTextField14.setText("0.0");
        jTextField14.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField14KeyPressed(evt);
            }
        });

        jTextField15.setText("0.0");

        jTextField16.setText("0.0");

        jTextField17.setText("0.0");

        jTextField7.setText("0");
        jTextField7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField7ActionPerformed(evt);
            }
        });
        jTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField7KeyPressed(evt);
            }
        });

        jButton1.setText("Rendimiento");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTextField18.setText("0");
        jTextField18.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField18KeyPressed(evt);
            }
        });

        jTextField19.setText("jTextField19");
        jTextField19.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField19KeyPressed(evt);
            }
        });

        jTextField20.setText("jTextField20");
        jTextField20.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField20KeyPressed(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel8.setText("N° decimales");

        cboDecimales.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "2", "3", "4", "5" }));
        cboDecimales.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cboDecimalesMouseClicked(evt);
            }
        });
        cboDecimales.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cboDecimalesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(593, 593, 593)
                .addComponent(jLabel8)
                .addGap(10, 10, 10)
                .addComponent(cboDecimales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(173, 173, 173)
                .addComponent(jLabel15)
                .addGap(57, 57, 57)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(36, 36, 36)
                .addComponent(jLabel16)
                .addGap(10, 10, 10)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 562, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(240, 240, 240)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel1)
                .addGap(34, 34, 34)
                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 270, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(166, 166, 166)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addComponent(jLabel3)
                .addGap(33, 33, 33)
                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel4)
                .addGap(18, 18, 18)
                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddE)
                    .addComponent(btnDelE)
                    .addComponent(jButton1)))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jLabel5)
                .addGap(10, 10, 10)
                .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(244, 244, 244)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(13, 13, 13)
                .addComponent(txtSubEq, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddM)
                    .addComponent(btnDelM)))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel6)
                .addGap(10, 10, 10)
                .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(229, 229, 229)
                .addComponent(jLabel20)
                .addGap(17, 17, 17)
                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddMa)
                    .addComponent(btnDelMa)))
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel7)
                .addGap(10, 10, 10)
                .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(252, 252, 252)
                .addComponent(jLabel21)
                .addGap(10, 10, 10)
                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(10, 10, 10)
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnAddT)
                    .addComponent(btnDelT)))
            .addGroup(layout.createSequentialGroup()
                .addGap(415, 415, 415)
                .addComponent(jLabel23)
                .addGap(18, 18, 18)
                .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(476, 476, 476)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(329, 329, 329)
                .addComponent(jLabel10)
                .addGap(10, 10, 10)
                .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(369, 369, 369)
                .addComponent(jLabel11)
                .addGap(10, 10, 10)
                .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(19, 19, 19)
                .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(421, 421, 421)
                .addComponent(jLabel12)
                .addGap(21, 21, 21)
                .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(479, 479, 479)
                .addComponent(jLabel13)
                .addGap(21, 21, 21)
                .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, 82, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(jLabel14))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel8))
                    .addComponent(cboDecimales, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel15))
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel16))
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel2))
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel3))
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel4))
                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(9, 9, 9)
                        .addComponent(btnAddE)
                        .addGap(7, 7, 7)
                        .addComponent(btnDelE)
                        .addGap(7, 7, 7)
                        .addComponent(jButton1)))
                .addGap(5, 5, 5)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel5))
                    .addComponent(jTextField18, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel17)
                    .addComponent(txtSubEq, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnAddM)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelM)))
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTextField19, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel20))))
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 95, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnAddMa)
                        .addGap(11, 11, 11)
                        .addComponent(btnDelMa)))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jLabel7))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(1, 1, 1)
                        .addComponent(jTextField20, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel21))
                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(3, 3, 3)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(13, 13, 13)
                        .addComponent(btnAddT)
                        .addGap(11, 11, 11)
                        .addComponent(btnDelT)))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel23))
                    .addComponent(jTextField10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel9))
                    .addComponent(jTextField11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel10))
                    .addComponent(jTextField12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField13, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel11))
                    .addComponent(jTextField14, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel12))
                    .addComponent(jTextField16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(3, 3, 3)
                        .addComponent(jLabel13))
                    .addComponent(jTextField17, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(11, 11, 11)
                .addComponent(jLabel14))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddEActionPerformed
        try {
            if (activoDlgEquipo == true) {
                dlgequipo.setLocation(23, 23);
                dlgequipo.moveToFront();
                dlgequipo.show();
            } else {
                activoDlgEquipo = true;
                dlgequipo = new dialogEquipo();
                vista.home.escritorio.add(dlgequipo);
                dlgequipo.setLocation(23, 23);
                dlgequipo.show();
            }
        } catch (Exception e) {
            e.printStackTrace();
            //System.out.println("err-  "+e.getMessage());
        }
    }//GEN-LAST:event_btnAddEActionPerformed

    private void jTextField7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField7KeyPressed
        // addEquipo
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            // aqui la consulta txtFiltro ::::: jTextField7
            String fill = jTextField7.getText().trim();
            int id = validacion.soloNumero(fill);
            List<Equipo> listFill = ctrEquip.getEquipoByID(id);

            //Sección 1 
            DefaultTableModel modelo = (DefaultTableModel) tableE.getModel();
            for (Equipo equipo : listFill) {
                //Sección 2
                Object[] fila = new Object[6];
                //Sección 3
                fila[0] = equipo.getDescripcion(); // descripcion
                fila[1] = ""; // cantidad (vacio)
                fila[2] = equipo.getDiario(); // diario
                fila[3] = ""; // costo hora (vacio)
                fila[4] = ""; // rendimiento (vacio)
                fila[5] = ""; // costo unitario (vacio)
                //Sección 4
                modelo.addRow(fila);
            }

            // mensaje de error
            if(listFill.isEmpty()){
                jTextField7.setText("No Ítem "+id);
            }
            
            //Sección 5
            tableE.setModel(modelo);
        }
    }//GEN-LAST:event_jTextField7KeyPressed

    private void btnDelEActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelEActionPerformed
        setDeleteJtable(tableE, "eq");
        calEquipo();
    }//GEN-LAST:event_btnDelEActionPerformed

    private void btnDelMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelMActionPerformed
        setDeleteJtable(tableM, "man");
        calManoObra();
    }//GEN-LAST:event_btnDelMActionPerformed

    private void tableEKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableEKeyPressed
        // table Calculo keyPress tabla equipo
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            setEventTableEquipo();
        }// fin keyPress
    }//GEN-LAST:event_tableEKeyPressed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        try {// modal rendimiento
            String dato = "";
            if (activoDlgRendimiento == true) {
                // metodo para traer el tot de rendimiento
                dato = getTotTarifa();
                dialogRendimiento.jTextField1.setText(dato);
                dialogRendimiento.setTableCantUpdate(getCantTableM());

                dlgrendimiento.setLocation(800, 100);
                dlgrendimiento.moveToFront();
                dlgrendimiento.show();
            } else {
                activoDlgRendimiento = true;
                dlgrendimiento = new dialogRendimiento();
                vista.home.escritorio.add(dlgrendimiento);
                // metodo para traer el tot de rendimiento
                dato = getTotTarifa();
                dialogRendimiento.jTextField1.setText(dato);
                dialogRendimiento.setTableCant(getCantTableM());

                dlgrendimiento.setLocation(800, 100);
                dlgrendimiento.show();
            }
        } catch (Exception e) {
            e.getMessage();
            //System.out.println("err-  "+e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField7ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField7ActionPerformed

    private void jTextField18KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField18KeyPressed
        // addMano
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            // aqui la consulta  txtCodManoObra ::: jTextField18
            String fill = jTextField18.getText().trim();
            int id = validacion.soloNumero(fill);
            List<ManoObra> listFill = ctrManObra.getManoObraByID(id);

            //Sección 1 
            DefaultTableModel modelo = (DefaultTableModel) tableM.getModel();
            for (ManoObra manoObra : listFill) {
                //Sección 2
                Object[] fila = new Object[6];
                //Sección 3
                fila[0] = manoObra.getDescripcion(); // descripcion
                fila[1] = ""; // cantidad (vacio)
                fila[2] = manoObra.getDiario(); // tarifa
                fila[3] = ""; // costo hora (vacio)
                fila[4] = ""; // rendimiento (vacio)
                fila[5] = ""; // costo unitario (vacio)
                //Sección 4
                modelo.addRow(fila);
            }
            
            // mensaje de error
            if(listFill.isEmpty()){
                jTextField18.setText("No Ítem "+id);
            }

            //Sección 5
            tableM.setModel(modelo);
        }
    }//GEN-LAST:event_jTextField18KeyPressed

    private void jTextField19KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField19KeyPressed
        // addMate 
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            // aqui la consulta
            //Sección 1 
            DefaultTableModel modelo = (DefaultTableModel) tableMa.getModel();
            //Sección 2
            Object[] fila = new Object[6];
            //Sección 3
            fila[0] = jTextField19.getText(); // descripcion
            fila[1] = jTextField19.getText(); // unidad 
            fila[2] = ""; // cantidad
            fila[3] = jTextField19.getText(); // precio unit
            fila[4] = ""; // costo unitario (vacio)
            //Sección 4
            modelo.addRow(fila);
            //Sección 5
            tableMa.setModel(modelo);
        }
    }//GEN-LAST:event_jTextField19KeyPressed

    private void jTextField20KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField20KeyPressed
        // addTra 
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            // aqui la consulta
            //Sección 1 
            DefaultTableModel modelo = (DefaultTableModel) tableT.getModel();
            //Sección 2
            Object[] fila = new Object[5];
            //Sección 3
            fila[0] = jTextField20.getText(); // descripcion
            fila[1] = jTextField20.getText(); // unidad
            fila[2] = ""; // cantidad
            fila[3] = jTextField20.getText(); // tarifa (vacio)
            fila[4] = ""; // cost unit (vacio)
            //Sección 4
            modelo.addRow(fila);
            //Sección 5
            tableT.setModel(modelo);
        }
    }//GEN-LAST:event_jTextField20KeyPressed

    private void btnDelTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelTActionPerformed
        setDeleteJtable(tableT, "tra");
        calTransporte();
    }//GEN-LAST:event_btnDelTActionPerformed

    private void btnDelMaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDelMaActionPerformed
        setDeleteJtable(tableMa, "mater");
        calMateriales();
    }//GEN-LAST:event_btnDelMaActionPerformed

    private void tableMaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableMaKeyPressed
        // calculo table Materiales
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            setEventTableMateriales();
        }// fin keyPress
    }//GEN-LAST:event_tableMaKeyPressed

    private void txtSubEqMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSubEqMouseClicked
        calEquipo();
    }//GEN-LAST:event_txtSubEqMouseClicked

    private void jTextField9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField9MouseClicked
        calMateriales();
    }//GEN-LAST:event_jTextField9MouseClicked

    private void jTextField10MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField10MouseClicked
        calTransporte();
    }//GEN-LAST:event_jTextField10MouseClicked

    private void jTextField8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField8MouseClicked
        calManoObra();
    }//GEN-LAST:event_jTextField8MouseClicked

    private void jTextField10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField10ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField10ActionPerformed

    private void jTextField11MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextField11MouseClicked
        calCostoDirecto();
    }//GEN-LAST:event_jTextField11MouseClicked

    private void jTextField12KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField12KeyPressed
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            calIndiUtili();
            calCostTotRubro();
        }
    }//GEN-LAST:event_jTextField12KeyPressed

    private void jTextField14KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField14KeyPressed
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            calOtherIndi();
            calCostTotRubro();
        }
    }//GEN-LAST:event_jTextField14KeyPressed

    private void tableMKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableMKeyPressed
        // tabla mano de obra
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            setEventTableManoObra();
        }// fin keyPress
    }//GEN-LAST:event_tableMKeyPressed

    private void tableEKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableEKeyTyped

    }//GEN-LAST:event_tableEKeyTyped

    private void tableTKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableTKeyPressed
        // calculo table Transporte
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            setEventTableTransporte();
        }// fin keyPress
    }//GEN-LAST:event_tableTKeyPressed

    private void btnAddMActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMActionPerformed
        try {
            if (activoDlgManoObra == true) {
                dlgManoObra.setLocation(23, 23);
                dlgManoObra.moveToFront();
                dlgManoObra.show();
            } else {
                activoDlgManoObra = true;
                dlgManoObra = new dialogManoObra();
                vista.home.escritorio.add(dlgManoObra);
                dlgManoObra.setLocation(23, 23);
                dlgManoObra.show();
            }
        } catch (Exception e) {
            e.getMessage();
            //System.out.println("err-  "+e.getMessage());
        }
    }//GEN-LAST:event_btnAddMActionPerformed

    private void btnAddMaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddMaActionPerformed
        try {
            if (activoDlgMateriales == true) {
                dlgMateriales.setLocation(23, 23);
                dlgMateriales.moveToFront();
                dlgMateriales.show();
            } else {
                activoDlgMateriales = true;
                dlgMateriales = new dialogMateriales();
                vista.home.escritorio.add(dlgMateriales);
                dlgMateriales.setLocation(23, 23);
                dlgMateriales.show();
            }
        } catch (Exception e) {
            e.getMessage();
            //System.out.println("err-  "+e.getMessage());
        }
    }//GEN-LAST:event_btnAddMaActionPerformed

    private void btnAddTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTActionPerformed
        try {
            if (activoDlgTransporte == true) {
                dlgTransporte.setLocation(23, 23);
                dlgTransporte.moveToFront();
                dlgTransporte.show();
            } else {
                activoDlgTransporte = true;
                dlgTransporte = new dialogTransporte();
                vista.home.escritorio.add(dlgTransporte);
                dlgTransporte.setLocation(23, 23);
                dlgTransporte.show();
            }
        } catch (Exception e) {
            e.getMessage();
            //System.out.println("err-  "+e.getMessage());
        }
    }//GEN-LAST:event_btnAddTActionPerformed

     private void cboDecimalesMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cboDecimalesMouseClicked


    }//GEN-LAST:event_cboDecimalesMouseClicked

    private void cboDecimalesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cboDecimalesActionPerformed
        // llamar a eventos que tienes las tablas equipo, mano de obra, materiales y transporte
        setEventTableEquipo();
        setEventTableManoObra();
        setEventTableMateriales();
        setEventTableTransporte();
        calCostoDirecto();
        calIndiUtili();
        calOtherIndi();
        calCostTotRubro();
    }//GEN-LAST:event_cboDecimalesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddE;
    private javax.swing.JButton btnAddM;
    private javax.swing.JButton btnAddMa;
    private javax.swing.JButton btnAddT;
    private javax.swing.JButton btnDelE;
    private javax.swing.JButton btnDelM;
    private javax.swing.JButton btnDelMa;
    private javax.swing.JButton btnDelT;
    private javax.swing.JComboBox<String> cboDecimales;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField14;
    private javax.swing.JTextField jTextField15;
    private javax.swing.JTextField jTextField16;
    private javax.swing.JTextField jTextField17;
    private javax.swing.JTextField jTextField18;
    private javax.swing.JTextField jTextField19;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField20;
    private javax.swing.JTextField jTextField3;
    public static javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTable tableE;
    private javax.swing.JTable tableM;
    private javax.swing.JTable tableMa;
    private javax.swing.JTable tableT;
    private javax.swing.JTextField txtSubEq;
    // End of variables declaration//GEN-END:variables

    // metodos de keypress de las tablas Inicio
    private void setEventTableEquipo() {
        int sizeRows = tableE.getRowCount();
        if (sizeRows > 0) {
            // vamos a calcular costo hora seleccion
            int position = tableE.getSelectedRow();
            // traigo valor de cantidad [1]
            String cant = tableE.getValueAt(position, 1).toString();
            if (!cant.equals("")) { // columna cantidad no nula
                int cantAux = validacion.soloNumero(cant);
                double tarifa = Double.parseDouble(tableE.getValueAt(position, 2).toString());

                double cost = getCostHora(cantAux, tarifa); // metodo control de decimales
                tableE.setValueAt(String.valueOf(cost), position, 3); // pongo el valor 
                tableE.setValueAt(String.valueOf(cantAux), position, 1); // pongo el valor de validaciones

                // espera a que columna rendimiento este diferente de nula
                String rendimiento = tableE.getValueAt(position, 4).toString();
                //System.out.println("rend " +rendimiento);
                if (!rendimiento.equals("")) {//columna rendimiento no nula
                    // primero llenamos la tabla Equipo con el rendimiento
                    int tablaSize = tableE.getRowCount();
                    String AuxRendi = tableE.getValueAt(0, 4).toString();
                    for (int i = 0; i < tablaSize; i++) {// adaptarlo a for no a position
                        tableE.setValueAt(AuxRendi, i, 4); // pongo el valor
                        // luego el calculo [3] * [4]  =  [5]
                        double costHor = Double.parseDouble(tableE.getValueAt(position, 3).toString());
                        //double costHor = validacion.solomoney(tableE.getValueAt(position, 3).toString());
                        double rendi = validacion.solomoney(AuxRendi);
                        tableE.setValueAt(String.valueOf(rendi), position, 4); // pongo el valor de validaciones

                        double aux = getCostUnit(costHor, rendi);// metodo control de decimales
                        // lleno el [5]
                        tableE.setValueAt(aux, position, 5); // pongo el valor 
                        // SubTotal de Equipo
                        calEquipo();
                    }
                }// verificacion de columna rendimiento no nula
            }// verificacion de columna cantidad no nula   
        }
    }

    private void setEventTableManoObra() {
        int sizeRows = tableM.getRowCount();
        if (sizeRows > 0) {
            // vamos a calcular costo hora seleccion
            int position = tableM.getSelectedRow();
            // traigo valor de cantidad [1]
            String cant = tableM.getValueAt(position, 1).toString();
            if (!cant.equals("")) { // columna cantidad no nula
                int cantAux = validacion.soloNumero(cant);
                double tarifa = Double.parseDouble(tableM.getValueAt(position, 2).toString());
                double cost = getCostHora(cantAux, tarifa); // metodo control de decimales
                tableM.setValueAt(String.valueOf(cantAux), position, 1); // pongo el valor de validaciones
                tableM.setValueAt(String.valueOf(cost), position, 3); // pongo el valor 

                String rendimiento = tableM.getValueAt(position, 4).toString();
                //System.out.println("rend " +rendimiento);
                if (!rendimiento.equals("")) {//columna rendimiento no nula
                    // primero llenamos la tabla Equipo y Mano de Obra con el rendimiento
                    int tablaSize = tableM.getRowCount();
                    String AuxRendi = tableM.getValueAt(0, 4).toString();
                    for (int i = 0; i < tablaSize; i++) {
                        tableM.setValueAt(AuxRendi, i, 4); // pongo el valor
                        // luego el calculo [3] * [4]  =  [5]
                        double costHor = Double.parseDouble(tableM.getValueAt(position, 3).toString());
                        //double costHor = validacion.solomoney(tableE.getValueAt(position, 3).toString());
                        double rendi = validacion.solomoney(AuxRendi);
                        tableM.setValueAt(String.valueOf(rendi), position, 4); // pongo el valor de validaciones

                        //**************************************
                        double aux = getCostUnit(costHor, rendi);// metodo control de decimales
                        // lleno el [5]
                        tableM.setValueAt(aux, position, 5); // pongo el valor 
                        // SubTotal de mano de obra
                        calManoObra();
                    }
                }// verificacion de columna rendimiento no nula
            }// verificacion de columna cantidad no nula
        }

    }

    private void setEventTableMateriales() {
        int sizeRows = tableMa.getRowCount();
        if (sizeRows > 0) {
            // vamos a calcular costo unitario
            int position = tableMa.getSelectedRow();
            // traigo valor de cantidad [2]
            String cant = tableMa.getValueAt(position, 2).toString();
            if (!cant.equals("")) { // columna cantidad no nula
                int cantAux = validacion.soloNumero(cant);
                // R:[4]  = [2] * [3]
                double precUnit = Double.parseDouble(tableMa.getValueAt(position, 3).toString());

                double cost = getCostUnit(cantAux, precUnit);  // metodo n decimales

                tableMa.setValueAt(String.valueOf(cost), position, 4); //R: pongo el valor 
                tableMa.setValueAt(String.valueOf(cantAux), position, 2); // pongo el valor de validaciones

                // calculo de subTotal de materiales de la tabla materiales
                calMateriales();
            }// verificacion de columna cantidad no nula   
        }
    }

    private void setEventTableTransporte() {
        int sizeRows = tableT.getRowCount();
        if (sizeRows > 0) {
            // vamos a calcular costo unitario
            int position = tableT.getSelectedRow();
            // traigo valor de cantidad [2]
            String cant = tableT.getValueAt(position, 2).toString();
            if (!cant.equals("")) { // columna cantidad no nula
                int cantAux = validacion.soloNumero(cant);
                // R:[4]  = [2] * [3]
                double tari = validacion.solomoney(tableT.getValueAt(position, 3).toString());

                double cost = getCostUnit(cantAux, tari);  // metodo n decimales

                tableT.setValueAt(String.valueOf(cost), position, 4); //R: pongo el valor 
                tableT.setValueAt(String.valueOf(cantAux), position, 2); // pongo el valor de validaciones
                tableT.setValueAt(String.valueOf(tari), position, 3); // pongo el valor de validaciones

                // calculo de subTotal de materiales de la tabla materiales
                calTransporte();
            }// verificacion de columna cantidad no nula   
        }
    }

    // metodos de keypress de las tablas fin
    // hacer que cabecera se quede fija y columnas alineadas a la derecha
    private void setTablesNoMoveHeader() {
        tableE.getTableHeader().setReorderingAllowed(false);
        tableM.getTableHeader().setReorderingAllowed(false);
        tableMa.getTableHeader().setReorderingAllowed(false);
        tableT.getTableHeader().setReorderingAllowed(false);

        DefaultTableCellRenderer cellRenderer = new DefaultTableCellHeaderRenderer();
        cellRenderer.setHorizontalAlignment(jLabel1.RIGHT);
        // tableE y TableM 1 al 5 other  1 al 4
        for (int i = 1; i < 6; ++i) {
            tableE.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
            tableM.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
        }

        for (int i = 1; i < 5; ++i) {
            tableMa.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
            tableT.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
        }

    }

    // hacer textfield no editable y alineado a la derecha
    private void setNoEditableTextField() {
        txtSubEq.setEditable(false);
        jTextField8.setEditable(false);
        jTextField9.setEditable(false);
        jTextField10.setEditable(false);

        jTextField11.setEditable(false);
        jTextField13.setEditable(false);
        jTextField15.setEditable(false);
        jTextField16.setEditable(false);
        jTextField17.setEditable(false);

        txtSubEq.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField8.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField9.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField10.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField11.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField13.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField15.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField16.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField17.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField12.setHorizontalAlignment(SwingConstants.RIGHT);
        jTextField14.setHorizontalAlignment(SwingConstants.RIGHT);
    }

    // hacer calculo de tableEquipo
    private void calEquipo() {
        // [1] cantidad    -> lleno [3] = [1]*[2]
        // [4] rendimiento -> lleno [5] = [3]/[4]
        // subtotalEquipo = suma de todo [5] 
        double subtotal = 0;
        DefaultTableModel model = (DefaultTableModel) tableE.getModel();
        int size = model.getRowCount(); // leer arriba comment
        if (size > 0) {
            for (int i = 0; i < size; ++i) {
                String val = model.getValueAt(i, 5).toString();
                if (!val.equals("")) {
                    subtotal += Double.parseDouble(model.getValueAt(i, 5).toString());
                }
            }
            subtotal = getCalEMaMT(subtotal); // metodo n decimales
            txtSubEq.setText(String.valueOf(subtotal));
        } else {
            txtSubEq.setText("0.0");
        }

    }

    // hacer calculo de tableManoObra
    private void calManoObra() {
        // [1] cantidad    -> lleno [3] = [1]*[2]
        // [4] rendimiento -> lleno [5] = [3]/[4]
        // subtotalManoObra = suma de todo [5]   
        double subtotal = 0;
        DefaultTableModel model = (DefaultTableModel) tableM.getModel();
        int size = model.getRowCount(); // leer arriba comment
        if (size > 0) {
            for (int i = 0; i < size; ++i) {
                String val = model.getValueAt(i, 5).toString();
                if (!val.equals("")) {
                    subtotal += Double.parseDouble(model.getValueAt(i, 5).toString());
                }
            }
            subtotal = getCalEMaMT(subtotal); // metodo n decimales
            jTextField8.setText(String.valueOf(subtotal));
            calCostoDirecto();
        } else {
            jTextField8.setText("0.0");
        }
    }

    // hacer calculo de tableMateriales
    private void calMateriales() {
        // [2] cantidad    -> lleno [4] = [2]*[3]   *
        // subtotalMateriales = suma de todo [4]    
        // [1] cantidad    -> lleno [3] = [1]*[2]
        // [4] rendimiento -> lleno [5] = [3]/[4]
        // subtotalManoObra = suma de todo [5]   
        double subtotal = 0;
        DefaultTableModel model = (DefaultTableModel) tableMa.getModel();
        int size = model.getRowCount(); // leer arriba comment
        if (size > 0) {
            for (int i = 0; i < size; ++i) {
                String val = model.getValueAt(i, 4).toString();
                if (!val.equals("")) {
                    subtotal += Double.parseDouble(model.getValueAt(i, 4).toString());
                }
            }
            subtotal = getCalEMaMT(subtotal);// metodo n decimales
            jTextField9.setText(String.valueOf(subtotal));
            calCostoDirecto();
        } else {
            jTextField9.setText("0.0");
        }
    }

    // hacer calculo de tableTransporte
    private void calTransporte() {
        // [2] cantidad    -> lleno [4] = [2]*[3]
        // subtotalTransporte = suma de todo [4]  
        double subtotal = 0;
        DefaultTableModel model = (DefaultTableModel) tableT.getModel();
        int size = model.getRowCount(); // leer arriba comment
        if (size > 0) {
            for (int i = 0; i < size; ++i) {
                String val = model.getValueAt(i, 4).toString();
                if (!val.equals("")) {
                    subtotal += Double.parseDouble(model.getValueAt(i, 4).toString());
                }
            }
            subtotal = getCalEMaMT(subtotal);// metodo n decimales
            jTextField10.setText(String.valueOf(subtotal));
            calCostoDirecto();
        } else {
            jTextField10.setText("0.0");
        }
    }

    // hacer calculo de costoDirecto
    private void calCostoDirecto() {
        double subEq = Double.parseDouble(txtSubEq.getText());
        double subMan = Double.parseDouble(jTextField8.getText());
        double subMat = Double.parseDouble(jTextField9.getText());
        double subTra = Double.parseDouble(jTextField10.getText());
        double tot = subEq + subMan + subMat + subTra;
        double aux = getCalEMaMT(tot);
        jTextField11.setText(String.valueOf(aux));
        calCostTotRubro();
    }

    // hacer calculo de indirecto y utilidades
    private void calIndiUtili() {
        double costDire = Double.parseDouble(jTextField11.getText());
        double indiUtil = Double.parseDouble(jTextField12.getText());
        double tot = (costDire * indiUtil) / 100;
        double aux = getCalEMaMT(tot);

        jTextField13.setText(String.valueOf(aux));
        calCostTotRubro();
    }

    // hacer calculo de otros indirectos
    private void calOtherIndi() {
        double costDire = Double.parseDouble(jTextField11.getText());
        double othIndir = Double.parseDouble(jTextField14.getText());
        double tot = (costDire * othIndir) / 100;
        double aux = getCalEMaMT(tot);

        jTextField15.setText(String.valueOf(aux));
        calCostTotRubro();
    }

    // hacer calculo de costo total del rubro
    private void calCostTotRubro() {
        double costDire = Double.parseDouble(jTextField11.getText());
        double indiUtil = Double.parseDouble(jTextField13.getText());
        double otrIndir = Double.parseDouble(jTextField15.getText());
        double tot = costDire + indiUtil + otrIndir;
        double aux = getCalEMaMT(tot);

        jTextField16.setText(String.valueOf(aux));
        jTextField17.setText(String.valueOf(aux));
    }

    // eliminar registro de una Jtable
    private void setDeleteJtable(JTable jt, String tbl) {
        //Sección 1
        DefaultTableModel model = (DefaultTableModel) jt.getModel();
        //Sección 2
        int size = 0;
        if (tbl.equals("eq")) {
            size = tableE.getSelectedRow();
        } else if (tbl.equals("mater")) {
            size = tableMa.getSelectedRow();
        } else if (tbl.equals("man")) {
            size = tableM.getSelectedRow();
        } else if (tbl.equals("tra")) {
            size = tableT.getSelectedRow();
        }
        //Sección 3
        if (size < 0) {
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar una fila de la tabla");
        } else {
            //Sección 4
            int confirmar = JOptionPane.showConfirmDialog(null,
                    "Esta seguro que desea Eliminar el registro? ");
            //Sección 5 
            if (JOptionPane.OK_OPTION == confirmar) {
                //Sección 6
                model.removeRow(size);
                //Sección 7
                JOptionPane.showMessageDialog(null, "Registro Eliminado");
            }
        }
    }

    // metodo para traer el acum de tarifa de jtable equipo y mano de obra
    private String getTotTarifa() {
        double aux = 0;
        int tablaSize = tableE.getRowCount();
        int tablaSize1 = tableM.getRowCount();
        for (int i = 0; i < tablaSize; i++) {
            //tot += (double) Math.round((Double.parseDouble(tableM.getValueAt(i, 2).toString())) * 100d) / 100d;
            aux += Double.parseDouble(tableE.getValueAt(i, 2).toString());
        }
        for (int i = 0; i < tablaSize1; i++) {
            //tot += (double) Math.round((Double.parseDouble(tableM.getValueAt(i, 2).toString())) * 100d) / 100d;
            aux += Double.parseDouble(tableM.getValueAt(i, 2).toString());
        }
        //System.out.println("gg "+aux);

        return String.valueOf(aux);
    }

    // metodo para traer todas las cantidades de mano de obra
    public List<String> getCantTableM() {
        List<String> aux = new ArrayList<>();
        int tablaSize = tableM.getRowCount();
        //System.out.println("tableM "+tablaSize);

        for (int i = 0; i < tablaSize; i++) {
            String Saux = "";
            Saux = tableM.getValueAt(i, 1).toString();
            aux.add(Saux);
        }

        return aux;
    }

    // metodo para controlar calculo segun numero de decimales tableEqui y table Mano
    private Double getCostHora(int cantAux, double tarifa) {
        //int decim = Integer.parseInt(cboDecimales.getSelectedItem().toString());
        int decim = cboDecimales.getSelectedIndex();
        //System.out.println("decimales " + decim);
        //System.out.println("decimalesObj " + cboDecimales.getSelectedItem().toString());
        // [0]=2 -- [1]=3 -- [2]=4 --  [3]=5 --  [4]=6 --  [5]=7
        if (decim == 0) {
            return (double) Math.round((cantAux * tarifa) * 100d) / 100d;
        } else {
            df = new DecimalFormat(squema[decim]);
            df.setRoundingMode(RoundingMode.CEILING);

            Double d = (cantAux * tarifa);
            String aux = df.format(d);
            String aux1 = aux.replace(',', '.');
            return Double.parseDouble(aux1);
        }
    }

    // metodo para controlar calculo segun numero de decimales tableEqui y table Mano
    private Double getCostUnit(double costHor, double rendi) {
        //int decim = Integer.parseInt(cboDecimales.getSelectedItem().toString());
        int decim = cboDecimales.getSelectedIndex();
        // [0]=2 -- [1]=3 -- [2]=4 --  [3]=5 --  [4]=6 --  [5]=7
        if (decim == 0) {
            return (double) Math.round((costHor * rendi) * 100d) / 100d;
        } else {
            DecimalFormat df = new DecimalFormat(squema[decim]);
            df.setRoundingMode(RoundingMode.CEILING);

            Double d = (costHor * rendi);
            String aux = df.format(d);
            String aux1 = aux.replace(',', '.');
            return Double.parseDouble(aux1);
        }
    }

    // metodo para controlar n decimales de metodos de calculo equi, mano, mate, trans
    private Double getCalEMaMT(double subtotal) {
        //int decim = Integer.parseInt(cboDecimales.getSelectedItem().toString());
        int decim = cboDecimales.getSelectedIndex();
        // [0]=2 -- [1]=3 -- [2]=4 --  [3]=5 --  [4]=6 --  [5]=7
        if (decim == 0) {
            return (double) Math.round(subtotal * 100d) / 100d;
        } else {
            DecimalFormat df = new DecimalFormat(squema[decim]);
            df.setRoundingMode(RoundingMode.CEILING);

            String aux = df.format(subtotal);
            String aux1 = aux.replace(',', '.');
            return Double.parseDouble(aux1);
        }
    }

}
