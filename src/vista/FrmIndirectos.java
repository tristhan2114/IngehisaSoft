/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package vista;

import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import modelo.EsquemaCostIndirect;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import util.validaciones;
import static vista.home.escritorio;

/**
 *
 * @author personal
 */
public class FrmIndirectos extends javax.swing.JInternalFrame {

    /**
     * MEDITAR Creates new form indirectos
     */
    validaciones vali = new validaciones();
    // variable para caracter
    private Character kpress;

    // control de costo de poliza
    public static boolean activoFrmIndirectoPoliza;

    // FrmIndirecto
    private FrmIndirectoPoliza frmIndirectoPoliza;

    // variables para exportar contenido a excel
    JFileChooser selecArchivo = new JFileChooser();
    File archivo;
    Workbook wb;

    // cabecera 
    private String cabecera[] = {"Cant", "Personal", "Costo\nSemanales", "Semanas", "Cálculos", "Subtotal", "Parcial", "Porcentaje"};

    public FrmIndirectos() {
        initComponents();
        //getContentPane().setBackground(new java.awt.Color(237,179,88));
        // default componentes
        setTitle("Costos Indirectos ");
        setIconifiable(true);
        jButton3.setVisible(false);
        jButton14.setVisible(false);
        setEsquemaTable();
        setTablsLlenar();

        calCostSemMens();
        calCostSemMensTbl2();

        calParcialTbl5();
        calSubTotTbls();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jLabel5 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jTable4 = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jTable5 = new javax.swing.JTable();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jTextField3 = new javax.swing.JTextField();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jTextField9 = new javax.swing.JTextField();
        jButton14 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><center><b>Cant</b></center></html>", "<html><center><b>Persona</b></center></html>", "<html><b><center>Costo<br> Semanales</center></b></html>", "<html><center><b>Semanas</b></center></html>", "<html><center><b>Calculos</b></center></html>", "<html><center><b>Subtotal</b></center></html>", "<html><center><b>Parcial</b></center></html>", "<html><center><b>Porcentaje</b></center></html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setPreferredSize(new java.awt.Dimension(585, 144));
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable1KeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(60);
            jTable1.getColumnModel().getColumn(1).setPreferredWidth(230);
            jTable1.getColumnModel().getColumn(1).setMaxWidth(230);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 80, 810, 80));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/cerrar.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 0, 38, 38));

        jLabel2.setBackground(new java.awt.Color(255, 153, 153));
        jLabel2.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 51, 51));
        jLabel2.setText("Grupo Técnico");
        jPanel1.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 60, 117, -1));

        jLabel3.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 0, 0));
        jLabel3.setText("Personal de Soporte");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 162, -1, -1));

        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><center><b>Cant</b></center></html>", "<html><center><b>Persona</b></center></html>", "<html><b><center>Costo<br> Semanales</center></b></html>", "<html><center><b>Semanas</b></center></html>", "<html><center><b>Calculos</b></center></html>", "<html><center><b>Subtotal</b></center></html>", "<html><center><b>Parcial</b></center></html>", "<html><center><b>Porcentaje</b></center></html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable3.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable3KeyPressed(evt);
            }
        });
        jScrollPane3.setViewportView(jTable3);
        if (jTable3.getColumnModel().getColumnCount() > 0) {
            jTable3.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTable3.getColumnModel().getColumn(0).setMaxWidth(60);
            jTable3.getColumnModel().getColumn(1).setPreferredWidth(230);
            jTable3.getColumnModel().getColumn(1).setMaxWidth(230);
        }

        jPanel1.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 280, 810, 80));

        jLabel4.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 51, 51));
        jLabel4.setText("Costo Semanales");
        jPanel1.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 262, -1, -1));

        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><center><b>Cant</b></center></html>", "<html><center><b>Persona</b></center></html>", "<html><b><center>Costo<br> Semanales</center></b></html>", "<html><center><b>Semanas</b></center></html>", "<html><center><b>Calculos</b></center></html>", "<html><center><b>Subtotal</b></center></html>", "<html><center><b>Parcial</b></center></html>", "<html><center><b>Porcentaje</b></center></html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable2.setPreferredSize(new java.awt.Dimension(585, 112));
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable2KeyPressed(evt);
            }
        });
        jScrollPane2.setViewportView(jTable2);
        if (jTable2.getColumnModel().getColumnCount() > 0) {
            jTable2.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTable2.getColumnModel().getColumn(0).setMaxWidth(60);
            jTable2.getColumnModel().getColumn(1).setPreferredWidth(230);
            jTable2.getColumnModel().getColumn(1).setMaxWidth(230);
        }

        jPanel1.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 180, 810, 80));

        jLabel5.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 51, 51));
        jLabel5.setText("Campamento");
        jPanel1.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 362, -1, -1));

        jTable4.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><center><b>Cant</b></center></html>", "<html><center><b>Persona</b></center></html>", "<html><b><center>Costo<br> Semanales</center></b></html>", "<html><center><b>Semanas</b></center></html>", "<html><center><b>Calculos</b></center></html>", "<html><center><b>Subtotal</b></center></html>", "<html><center><b>Parcial</b></center></html>", "<html><center><b>Porcentaje</b></center></html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable4.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable4KeyPressed(evt);
            }
        });
        jScrollPane4.setViewportView(jTable4);
        if (jTable4.getColumnModel().getColumnCount() > 0) {
            jTable4.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTable4.getColumnModel().getColumn(0).setMaxWidth(60);
            jTable4.getColumnModel().getColumn(1).setPreferredWidth(230);
            jTable4.getColumnModel().getColumn(1).setMaxWidth(230);
        }

        jPanel1.add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 380, 810, 80));

        jLabel6.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 51, 51));
        jLabel6.setText("Seguros");
        jPanel1.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 462, -1, -1));

        jTable5.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "<html><center><b>Cant</b></center></html>", "<html><center><b>Persona</b></center></html>", "<html><b><center>Costo<br> Semanales</center></b></html>", "<html><center><b>Semanas</b></center></html>", "<html><center><b>Calculos</b></center></html>", "<html><center><b>Subtotal</b></center></html>", "<html><center><b>Parcial</b></center></html>", "<html><center><b>Porcentaje</b></center></html>"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                true, true, true, true, true, true, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable5.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTable5KeyPressed(evt);
            }
        });
        jScrollPane5.setViewportView(jTable5);
        if (jTable5.getColumnModel().getColumnCount() > 0) {
            jTable5.getColumnModel().getColumn(0).setPreferredWidth(60);
            jTable5.getColumnModel().getColumn(0).setMaxWidth(60);
            jTable5.getColumnModel().getColumn(1).setPreferredWidth(230);
            jTable5.getColumnModel().getColumn(1).setMaxWidth(230);
        }

        jPanel1.add(jScrollPane5, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 480, 810, 80));

        jTextField1.setText("133272.18504");
        jPanel1.add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(382, 32, 130, -1));

        jTextField2.setText("0.0");
        jPanel1.add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(605, 32, 70, -1));

        jLabel7.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel7.setText("Costo Directo:");
        jPanel1.add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(300, 36, -1, -1));

        jLabel8.setFont(new java.awt.Font("Arial", 1, 11)); // NOI18N
        jLabel8.setText("Porcentaje C.I:");
        jPanel1.add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(520, 36, -1, -1));

        jLabel9.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(255, 0, 0));
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/apus.png"))); // NOI18N
        jLabel9.setText("TOTALES");
        jPanel1.add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(390, 570, 113, -1));

        jTextField3.setText("0.0");
        jTextField3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField3ActionPerformed(evt);
            }
        });
        jPanel1.add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 580, 81, -1));

        jTextField4.setText("0.0");
        jPanel1.add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 580, 80, -1));

        jTextField5.setText("0.0");
        jPanel1.add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 580, 94, -1));

        jLabel10.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel10.setText("Total Subtotal");
        jPanel1.add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 560, -1, -1));

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Total Parcial");
        jPanel1.add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 560, -1, -1));

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel12.setText("Total Porcentaje");
        jPanel1.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 560, -1, -1));

        jPanel4.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jLabel1.setFont(new java.awt.Font("Arial", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/ingehisa.png"))); // NOI18N
        jLabel1.setText("INGEHISA / Costo Indirecto");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 235, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(11, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel1.add(jPanel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 10, 270, 40));

        jButton3.setText("Actualizar");
        jPanel1.add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 570, -1, -1));

        jButton2.setText("Generar");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 570, -1, -1));

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel13.setText("Indirectos");
        jPanel1.add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 610, -1, -1));

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel14.setText("Imprevistos");
        jPanel1.add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 610, -1, -1));

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel15.setText("Utilidad");
        jPanel1.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 610, -1, -1));

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel16.setText("Total");
        jPanel1.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 610, -1, -1));

        jTextField6.setText("0.0");
        jPanel1.add(jTextField6, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 625, 81, -1));

        jTextField7.setText("0.0");
        jTextField7.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField7KeyPressed(evt);
            }
        });
        jPanel1.add(jTextField7, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 625, 81, -1));

        jTextField8.setText("0.0");
        jTextField8.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField8KeyPressed(evt);
            }
        });
        jPanel1.add(jTextField8, new org.netbeans.lib.awtextra.AbsoluteConstraints(630, 625, 81, -1));

        jButton4.setText("+");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(816, 490, -1, -1));

        jButton5.setText("-");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(816, 110, -1, -1));

        jButton6.setText("+");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton6, new org.netbeans.lib.awtextra.AbsoluteConstraints(816, 80, -1, -1));

        jButton7.setText("+");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(816, 190, -1, -1));

        jButton8.setText("+");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton8, new org.netbeans.lib.awtextra.AbsoluteConstraints(816, 290, -1, -1));

        jButton9.setText("+");
        jButton9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton9ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton9, new org.netbeans.lib.awtextra.AbsoluteConstraints(816, 380, -1, -1));

        jButton10.setText("-");
        jButton10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton10ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton10, new org.netbeans.lib.awtextra.AbsoluteConstraints(816, 520, -1, -1));

        jButton11.setText("-");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton11, new org.netbeans.lib.awtextra.AbsoluteConstraints(816, 220, -1, -1));

        jButton12.setText("-");
        jButton12.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton12ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton12, new org.netbeans.lib.awtextra.AbsoluteConstraints(816, 320, -1, -1));

        jButton13.setText("-");
        jButton13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton13ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton13, new org.netbeans.lib.awtextra.AbsoluteConstraints(816, 410, -1, -1));

        jTextField9.setText("0.0");
        jPanel1.add(jTextField9, new org.netbeans.lib.awtextra.AbsoluteConstraints(720, 625, 94, -1));

        jButton14.setText("Costo Poliza");
        jButton14.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton14ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton14, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 625, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 656, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        home.activoIndirecto = false;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // agregar datos en tabla Seguros
        addRow(jTable5);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // eliminar row de tabla Grupo Tecnico
        deleteRow(jTable1);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // agregar datos en tabla Grupo Tecnico
        addRow(jTable1);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // agregar datos en tabla Personal de Soporte
        addRow(jTable2);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
        // agregar datos en tabla Costo Semanales
        addRow(jTable3);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton9ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton9ActionPerformed
        // agregar datos en tabla Campamento
        addRow(jTable4);
    }//GEN-LAST:event_jButton9ActionPerformed

    private void jButton10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton10ActionPerformed
        // eliminar row de tabla Seguros
        deleteRow(jTable5);
    }//GEN-LAST:event_jButton10ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed
        // eliminar row de tabla Personal soporte
        deleteRow(jTable2);
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton12ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton12ActionPerformed
        // eliminar row de tabla Costo Semanales
        deleteRow(jTable3);
    }//GEN-LAST:event_jButton12ActionPerformed

    private void jButton13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton13ActionPerformed
        // eliminar row de tabla Campamento
        deleteRow(jTable4);
    }//GEN-LAST:event_jButton13ActionPerformed

    private void jTable1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable1KeyPressed
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            calCostSemMens();
            calParcialAndPorcent(jTable1);
            calSubTotTbls();
        }// fin keyPress
    }//GEN-LAST:event_jTable1KeyPressed

    private void jTable2KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable2KeyPressed
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            calCostSemMensTbl2();
            calSubTot(jTable2);
            calParcialAndPorcent(jTable2);
            calSubTotTbls();
        }// fin keyPress
    }//GEN-LAST:event_jTable2KeyPressed

    private void jTable3KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable3KeyPressed
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            calSubTot(jTable3);
            calParcialAndPorcent(jTable3);
            calSubTotTbls();
        }// fin keyPress
    }//GEN-LAST:event_jTable3KeyPressed

    private void jTable4KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable4KeyPressed
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            calSubTot(jTable4);
            calParcialAndPorcent(jTable4);
        }// fin keyPress
    }//GEN-LAST:event_jTable4KeyPressed

    private void jTable5KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTable5KeyPressed
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            calParcialTbl5();
            calSubTotTbls();
        }// fin keyPress
    }//GEN-LAST:event_jTable5KeyPressed

    private void jTextField7KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField7KeyPressed
        // imprevisto
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            calTotWithIndirectImprevUtil();
        }
    }//GEN-LAST:event_jTextField7KeyPressed

    private void jTextField8KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField8KeyPressed
        // utilidad
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            calTotWithIndirectImprevUtil();
        }
    }//GEN-LAST:event_jTextField8KeyPressed

    private void jButton14ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton14ActionPerformed
        // FrmIndirectoPoliza
        /*try {
            if (activoFrmIndirectoPoliza == true) {
                frmIndirectoPoliza.setLocation(500, 300);
                frmIndirectoPoliza.table.setValueAt(jTextField1.getText(), 0, 2);
                frmIndirectoPoliza.moveToFront();
                frmIndirectoPoliza.show();
            } else {
                activoFrmIndirectoPoliza = true;
                frmIndirectoPoliza = new FrmIndirectoPoliza();
                frmIndirectoPoliza.table.setValueAt(jTextField1.getText(), 0, 2);
                escritorio.add(frmIndirectoPoliza);
                frmIndirectoPoliza.setLocation(500, 300);
                frmIndirectoPoliza.show();
            }
        } catch (Exception e) {
            e.getMessage();
            //System.out.println("err-  "+e.getMessage());
        }*/
    }//GEN-LAST:event_jButton14ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed

        EsquemaCostIndirect datos = getEsquema();
        System.out.println("todo " + datos.toString());
        selecArchivo.setSelectedFile(new File("CostoIndirecto-0001.xlsx"));
        if (selecArchivo.showDialog(null, "Exportar") == JFileChooser.APPROVE_OPTION) {
            archivo = selecArchivo.getSelectedFile();
            if (archivo.getName().endsWith("xls") || archivo.getName().endsWith("xlsx")) {
                //Cambia con el nombre de tu JTABLE
                JOptionPane.showMessageDialog(null, Exportar(archivo, datos) + "\n Formato ." + archivo.getName().substring(archivo.getName().lastIndexOf(".") + 1));
            } else {
                JOptionPane.showMessageDialog(null, "Elija un formato valido.");
            }
        }
    }//GEN-LAST:event_jButton2ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmIndirectos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmIndirectos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmIndirectos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmIndirectos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmIndirectos().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    private javax.swing.JTable jTable4;
    private javax.swing.JTable jTable5;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    // End of variables declaration//GEN-END:variables

    // no move columnTable y dimension fija 
    private void setEsquemaTable() {
        jTable1.getTableHeader().setReorderingAllowed(false);
        jTable2.getTableHeader().setReorderingAllowed(false);
        jTable3.getTableHeader().setReorderingAllowed(false);
        jTable4.getTableHeader().setReorderingAllowed(false);
        jTable5.getTableHeader().setReorderingAllowed(false);

        jTable1.getTableHeader().setPreferredSize(new java.awt.Dimension(0, 29));
        jTable2.getTableHeader().setPreferredSize(new java.awt.Dimension(0, 29));
        jTable3.getTableHeader().setPreferredSize(new java.awt.Dimension(0, 29));
        jTable4.getTableHeader().setPreferredSize(new java.awt.Dimension(0, 29));
        jTable5.getTableHeader().setPreferredSize(new java.awt.Dimension(0, 29));
    }

    // agregar fila en jtable dinamico para las 5 tablas
    private void addRow(JTable tbl) {
        //Sección 1 
        DefaultTableModel modelo = (DefaultTableModel) tbl.getModel();
        //Sección 2
        Object[] fila = new Object[8];
        for (int i = 0; i < fila.length; ++i) {
            //Sección 3
            fila[i] = ""; // descripcion
        }
        //Sección 4
        modelo.addRow(fila);
        //Sección 5
        tbl.setModel(modelo);
    }

    // eliminar fila de tabla seleccionada dinamica de las 5 tablas
    private void deleteRow(JTable tbl) {
        //Sección 1
        DefaultTableModel model = (DefaultTableModel) tbl.getModel();
        //Sección 2
        int size = tbl.getSelectedRow();

        //Sección 3
        if (size < 0) {
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar una fila de la tabla");
        } else {
            //Sección 4
            int confirmar = JOptionPane.showConfirmDialog(null,
                    "Esta seguro que desea Eliminar el registro? ");
            //Sección 5 
            if (JOptionPane.OK_OPTION == confirmar) {
                //Sección 6
                model.removeRow(size);
                //Sección 7
                JOptionPane.showMessageDialog(null, "Registro Eliminado");
            }
        }

    }

    // neurobion  --> checar
    private void setTablsLlenar() {
        DefaultTableModel modelo1 = (DefaultTableModel) jTable1.getModel();
        DefaultTableModel modelo2 = (DefaultTableModel) jTable2.getModel();
        DefaultTableModel modelo3 = (DefaultTableModel) jTable3.getModel();
        DefaultTableModel modelo4 = (DefaultTableModel) jTable4.getModel();
        DefaultTableModel modelo5 = (DefaultTableModel) jTable5.getModel();

        int size = 0;
        size = getGrupTecnic().size();
        changeDtaTbls(modelo1, jTable1, size, getGrupTecnic());

        size = getPersoSoport().size();
        changeDtaTbls(modelo2, jTable2, size, getPersoSoport());

        size = getCostSemanal().size();
        changeDtaTbls(modelo3, jTable3, size, getCostSemanal());

        size = getCamp().size();
        changeDtaTbls(modelo4, jTable4, size, getCamp());

        size = getSeguros().size();
        changeDtaTbls(modelo5, jTable5, size, getSeguros());
        jTable5.setValueAt("0.0", 0, 5);
        jTable5.setValueAt("0.0", 1, 5);

    }

    private void changeDtaTbls(DefaultTableModel modelo1, JTable tbl, int size, List<List<String>> lista) {
        //Sección 2
        for (int i = 0; i < size; ++i) {
            Object[] fila = new Object[8];
            //System.out.println("fff " + getGrupTecnic().get(i).get(i));
            //Sección 3
            if (i < lista.size()) {
                fila[0] = lista.get(i).get(0);
                fila[1] = lista.get(i).get(1);
                fila[2] = lista.get(i).get(2);
                fila[3] = lista.get(i).get(3);

                fila[4] = "";
                fila[5] = "";
                fila[6] = "";
                fila[7] = "";

            }
            if (i == 0) {
                fila[4] = "";
                fila[5] = "";
                fila[6] = "0.0";
                fila[7] = "0";
            }

            //Sección 4
            modelo1.addRow(fila);
        }
        //Sección 5
        tbl.setModel(modelo1);
    }

    // calculo costoSemanal * 4 :: solo tbl GrupoTecnic
    final int SEMANAS = 4;

    // metodo 1
    private void calCostSemMens() {
        int sizeRowCount = jTable1.getRowCount();
        if (sizeRowCount > 0) {
            for (int i = 0; i < sizeRowCount; ++i) {
                double costSema = vali.solomoney(jTable1.getValueAt(i, 2).toString());
                jTable1.setValueAt(String.valueOf(costSema), i, 2);
                double tot = costSema * SEMANAS;
                jTable1.setValueAt(String.valueOf(tot), i, 4);
            }
            calSubTot(jTable1);
        }
    }

    // metodo 1 de tabla2
    private void calCostSemMensTbl2() {
        int sizeRowCount = jTable2.getRowCount();
        if (sizeRowCount > 0) {
            for (int i = 0; i < sizeRowCount; ++i) {
                double costSema = vali.solomoney(jTable2.getValueAt(i, 2).toString());
                jTable2.setValueAt(String.valueOf(costSema), i, 2);
                double tot = costSema * SEMANAS;
                jTable2.setValueAt(String.valueOf(tot), i, 4);
            }
            calSubTot(jTable1);
        }
    }

    // metodo 1.1
    private void calSubTot(JTable tbl) {
        // tbl Grupo  0  2  3
        int sizeRowCount = tbl.getRowCount();
        if (sizeRowCount > 0) {
            for (int i = 0; i < sizeRowCount; ++i) {
                int cant = vali.soloNumero(tbl.getValueAt(i, 0).toString());
                tbl.setValueAt(String.valueOf(cant), i, 0);
                double costSema = vali.solomoney(tbl.getValueAt(i, 2).toString());
                double semanas = vali.solomoney(tbl.getValueAt(i, 3).toString());
                double subTot = cant * costSema * semanas;
                subTot = (double) Math.round(subTot * 100d) / 100d;
                tbl.setValueAt(String.valueOf(subTot), i, 5);
            }
        }
    }

    // metodo 2
    private void calParcialAndPorcent(JTable tbl) {
        //  [6] acum    [5] valor
        int sizeRowCount = tbl.getRowCount();
        if (sizeRowCount > 0) {
            double parcial = 0.0;
            for (int i = 0; i < sizeRowCount; ++i) {
                parcial += vali.solomoney(tbl.getValueAt(i, 5).toString());
            }
            parcial = (double) Math.round(parcial * 100d) / 100d;
            tbl.setValueAt(String.valueOf(parcial), 0, 6);

            // calculamos el porcentaje
            // table position 7  / jTextField1
            String txt = jTextField1.getText().trim();
            if (!(txt.equals("0.0") || txt.equals("0") || txt.equals(""))) {
                double par = vali.solomoney(tbl.getValueAt(0, 6).toString());
                double tot = par / (vali.solomoney(txt));
                tot = tot * 100;
                tot = (double) Math.round(tot * 100d) / 100d;
                tbl.setValueAt(String.valueOf(tot) + "%", 0, 7);
            }
        }
    }

    // calculo de parcial tabla 5 *********************************
    private void calParcialTbl5() {
        // calculamos parcial de la tabla 5
        // valor costo directo :: jTextField1
        final double porc = 0.05;
        double costDirecTxt = vali.solomoney(jTextField1.getText());
        double tot = costDirecTxt * porc;
        tot = (double) Math.round(tot * 100d) / 100d;
        jTable5.setValueAt(String.valueOf(tot), 0, 6);

        // calculamos el porcentaje 
        String txt = jTextField1.getText().trim();
        if (!(txt.equals("0.0") || txt.equals("0") || txt.equals(""))) {
            double par = vali.solomoney(jTable5.getValueAt(0, 6).toString());
            double tot1 = par / (vali.solomoney(txt));
            tot1 = tot1 * 100;
            tot1 = (double) Math.round(tot1 * 100d) / 100d;
            jTable5.setValueAt(String.valueOf(tot1) + "%", 0, 7);
        }
    }

    // metodo 3 acum subtotal de todas las tablas en txt 
    private void calSubTotTbls() {
        double acum = 0.0;
        double porcenCI = vali.solomoney(jTextField2.getText());
        jTextField2.setText(String.valueOf(porcenCI));
        // traigo acum de tbl 1
        double totTbl1 = vali.solomoney(jTable1.getValueAt(0, 6).toString());
        double totTbl2 = vali.solomoney(jTable2.getValueAt(0, 6).toString());
        double totTbl3 = vali.solomoney(jTable3.getValueAt(0, 6).toString());
        double totTbl4 = vali.solomoney(jTable4.getValueAt(0, 6).toString());
        double totTbl5 = vali.solomoney(jTable5.getValueAt(0, 5).toString());
        double totTbl51 = vali.solomoney(jTable5.getValueAt(1, 5).toString());
        // poner la tbl 5 pilas 
        acum = totTbl1 + totTbl2 + totTbl3 + totTbl4 + totTbl5 + totTbl51;
        acum = (double) Math.round(acum * 100d) / 100d;
        jTextField3.setText(String.valueOf(acum));

        // calculo de parciales de todas las tbls
        double acum1 = 0.0;
        double totParTbl1 = vali.solomoney(jTable1.getValueAt(0, 6).toString());
        double totParTbl2 = vali.solomoney(jTable2.getValueAt(0, 6).toString());
        double totParTbl3 = vali.solomoney(jTable3.getValueAt(0, 6).toString());
        double totParTbl4 = vali.solomoney(jTable4.getValueAt(0, 6).toString());
        double totParTbl5 = vali.solomoney(jTable5.getValueAt(0, 6).toString());
        acum1 = totParTbl1 + totParTbl2 + totParTbl3 + totParTbl4 + totParTbl5;
        acum1 = (double) Math.round(acum1 * 100d) / 100d;
        jTextField4.setText(String.valueOf(acum1));

        //calculo de totales porcentaje [7]
        double acum2 = 0.0;
        double totPorTbl1 = vali.solomoney(setDeletePorc(jTable1.getValueAt(0, 7).toString()));
        double totPorTbl2 = vali.solomoney(setDeletePorc(jTable2.getValueAt(0, 7).toString()));
        double totPorTbl3 = vali.solomoney(setDeletePorc(jTable3.getValueAt(0, 7).toString()));
        double totPorTbl4 = vali.solomoney(setDeletePorc(jTable4.getValueAt(0, 7).toString()));
        double totPorTbl5 = vali.solomoney(setDeletePorc(jTable5.getValueAt(0, 7).toString()));
        acum2 = totPorTbl1 + totPorTbl2 + totPorTbl3 + totPorTbl4 + totPorTbl5;

        acum2 = (double) Math.round(acum2 * 100d) / 100d;
        jTextField5.setText(String.valueOf(acum2) + "%");
        // indirecto
        jTextField6.setText(String.valueOf(acum2) + "%");
    }

    private void calTotWithIndirectImprevUtil() {
        if (jTextField7.getText().length() > 0) {
            String n1 = setDeletePorc(jTextField7.getText());
            String n2 = setDeletePorc(jTextField8.getText());
            double indirect = vali.solomoney(setDeletePorc(jTextField6.getText()));
            double imprevis = vali.solomoney(setDeletePorc(jTextField7.getText()));
            double utilidad = vali.solomoney(setDeletePorc(jTextField8.getText()));
            double total = indirect + imprevis + utilidad;
            total = (double) Math.round(total * 100d) / 100d;

            jTextField7.setText(n1 + "%");
            jTextField8.setText(n2 + "%");
            jTextField9.setText(String.valueOf(total) + "%");
        }
    }

    // Listas con datos de cada tabla
    private List<List<String>> getGrupTecnic() {
        // 1 Tecnico 600    13  *** incluir en arrays
        List<List<String>> aux = new ArrayList<>(); // 7
        List<String> data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("SUPERINTENDENTE DE OBRA"); // personal
        data.add("0"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("RESIDENTE DE OBRA"); // personal
        data.add("200"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("PLANILLADOR"); // personal
        data.add("175"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("AYUDANTE DE OBRA"); // personal
        data.add("150"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("TOPOGRAFOS"); // personal
        data.add("150"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("PROGRAMADOR DE OBRA Y ADQUISICIONES"); // personal
        data.add("0"); // costo semanal  
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        return aux;
    }

    private List<List<String>> getPersoSoport() {
        // 1 Obrero 450    450/4  *** incluir en arrays
        List<List<String>> aux = new ArrayList<>(); // 7
        List<String> data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("BODEGUERO"); // personal
        data.add("140"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("GUARDIANIA"); // personal
        data.add("200"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("CADENERO"); // personal
        data.add("125"); // costo semanal
        data.add("6.50"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("CHOFER"); // personal
        data.add("125"); // costo semanal
        data.add("6.50"); // semanas
        aux.add(data);
        data = null;

        return aux;
    }

    private List<List<String>> getCostSemanal() {
        // 1 lIQUIDACION 2    450/4  *** incluir en arrays
        List<List<String>> aux = new ArrayList<>(); // 7
        List<String> data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("VIATICOS"); // personal
        data.add("9"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("BONOS"); // personal
        data.add("25"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("CAMION"); // personal
        data.add("75"); // costo semanal
        data.add("6.50"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("CAMIONETA"); // personal
        data.add("40"); // costo semanal
        data.add("6.50"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("COMUNICACIÓN"); // personal
        data.add("7"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("PLANOS ASBUILT"); // personal
        data.add("200"); // costo semanal
        data.add("1"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("PAPELERIA"); // personal
        data.add("20"); // costo semanal
        data.add("15"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("IMPLEMENTOS DE SEGURIDAD POR PERSONA"); // personal
        data.add("100"); // costo semanal
        data.add("1"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("COSTO DE OFICINA (ADMINISTRATIVO)"); // personal
        data.add("50"); // costo semanal
        data.add("15"); // semanas
        aux.add(data);
        data = null;

        return aux;
    }

    private List<List<String>> getCamp() {
        List<List<String>> aux = new ArrayList<>(); // 7
        List<String> data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("DEPARTAMENTO"); // personal
        data.add("100"); // costo semanal
        data.add("17"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("PAGOS ELECTRICOS Y AGUA POTABLE"); // personal
        data.add("16"); // costo semanal
        data.add("300"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("ALIMENTACION PERSONAL LOCAL"); // personal
        data.add("2.50"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("ALIMENTACION PERSONAL"); // personal
        data.add("60"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("COMBUSTIBLE BUS"); // personal
        data.add("50"); // costo semanal
        data.add("13"); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("VIAJES EN AVION Y HOTEL"); // personal
        data.add("300"); // costo semanal
        data.add("10"); // semanas
        aux.add(data);
        data = null;
        return aux;
    }

    private List<List<String>> getSeguros() {
        List<List<String>> aux = new ArrayList<>(); // 7
        List<String> data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("GARANTIA BUEN USO ANTICIPO POR 20%"); // personal
        data.add(""); // costo semanal
        data.add(""); // semanas
        aux.add(data);
        data = null;

        data = new ArrayList<>();
        data.add("1"); // cantidad
        data.add("GARANTIA FIEL CUMPLIMIENTO"); // personal
        data.add(""); // costo semanal
        data.add(""); // semanas
        aux.add(data);
        data = null;

        return aux;
    }

    private EsquemaCostIndirect getEsquema() {
        EsquemaCostIndirect aux = new EsquemaCostIndirect();
        aux.setCostIndirecto(jTextField1.getText());
        aux.setPorcent(jTextField2.getText());

        int sizeRowsCount = 0;
        // tabla Grupo Tecnico (jTable1)
        sizeRowsCount = jTable1.getRowCount();
        for (int i = 0; i < sizeRowsCount; ++i) {
            List<String> tbl = new ArrayList<>();
            tbl.add(jTable1.getValueAt(i, 0).toString());
            tbl.add(jTable1.getValueAt(i, 1).toString());
            tbl.add(jTable1.getValueAt(i, 2).toString());
            tbl.add(jTable1.getValueAt(i, 3).toString());
            tbl.add(jTable1.getValueAt(i, 4).toString());
            tbl.add(jTable1.getValueAt(i, 5).toString());
            tbl.add(jTable1.getValueAt(i, 6).toString());
            tbl.add(jTable1.getValueAt(i, 7).toString());
            aux.getTblGT().add(tbl);
        }

        // tabla Personal de Soporte  (jTable2)
        sizeRowsCount = jTable2.getRowCount();
        for (int i = 0; i < sizeRowsCount; ++i) {
            List<String> tbl = new ArrayList<>();
            tbl.add(jTable2.getValueAt(i, 0).toString());
            tbl.add(jTable2.getValueAt(i, 1).toString());
            tbl.add(jTable2.getValueAt(i, 2).toString());
            tbl.add(jTable2.getValueAt(i, 3).toString());
            tbl.add(jTable2.getValueAt(i, 4).toString());
            tbl.add(jTable2.getValueAt(i, 5).toString());
            tbl.add(jTable2.getValueAt(i, 6).toString());
            tbl.add(jTable2.getValueAt(i, 7).toString());
            aux.getTblPS().add(tbl);
        }

        // tabla Costos Semanales  (jTable3)
        sizeRowsCount = jTable3.getRowCount();
        for (int i = 0; i < sizeRowsCount; ++i) {
            List<String> tbl = new ArrayList<>();
            tbl.add(jTable3.getValueAt(i, 0).toString());
            tbl.add(jTable3.getValueAt(i, 1).toString());
            tbl.add(jTable3.getValueAt(i, 2).toString());
            tbl.add(jTable3.getValueAt(i, 3).toString());
            tbl.add(jTable3.getValueAt(i, 4).toString());
            tbl.add(jTable3.getValueAt(i, 5).toString());
            tbl.add(jTable3.getValueAt(i, 6).toString());
            tbl.add(jTable3.getValueAt(i, 7).toString());
            aux.getTblCS().add(tbl);
        }

        // tabla Campamento  (jTable4)
        sizeRowsCount = jTable4.getRowCount();
        for (int i = 0; i < sizeRowsCount; ++i) {
            List<String> tbl = new ArrayList<>();
            tbl.add(jTable4.getValueAt(i, 0).toString());
            tbl.add(jTable4.getValueAt(i, 1).toString());
            tbl.add(jTable4.getValueAt(i, 2).toString());
            tbl.add(jTable4.getValueAt(i, 3).toString());
            tbl.add(jTable4.getValueAt(i, 4).toString());
            tbl.add(jTable4.getValueAt(i, 5).toString());
            tbl.add(jTable4.getValueAt(i, 6).toString());
            tbl.add(jTable4.getValueAt(i, 7).toString());
            aux.getTblCa().add(tbl);
        }

        // tabla Seguros  (jTable5)
        sizeRowsCount = jTable5.getRowCount();
        for (int i = 0; i < sizeRowsCount; ++i) {
            List<String> tbl = new ArrayList<>();
            tbl.add(jTable5.getValueAt(i, 0).toString());
            tbl.add(jTable5.getValueAt(i, 1).toString());
            tbl.add(jTable5.getValueAt(i, 2).toString());
            tbl.add(jTable5.getValueAt(i, 3).toString());
            tbl.add(jTable5.getValueAt(i, 4).toString());
            tbl.add(jTable5.getValueAt(i, 5).toString());
            tbl.add(jTable5.getValueAt(i, 6).toString());
            tbl.add(jTable5.getValueAt(i, 7).toString());
            aux.getTblSe().add(tbl);
        }

        aux.setTotSubtotal(jTextField3.getText());
        aux.setTotParcial(jTextField4.getText());
        aux.setTotPorcentaje(jTextField5.getText());

        aux.setIndirect(jTextField6.getText());
        aux.setImprevist(jTextField7.getText());
        aux.setUtilidad(jTextField8.getText());
        aux.setTotal(jTextField9.getText());

        return aux;
    }

    private String Exportar(File archivo, EsquemaCostIndirect datos) {
        String respuesta = "Falla en la generación del Costo Indirecto.";
        if (archivo.getName().endsWith("xls")) {
            wb = new HSSFWorkbook();
        } else {
            wb = new XSSFWorkbook();
        }

        Sheet hoja = wb.createSheet("Costo Indirecto");
        // fuente negrita de tama�o 10
        Font fontNeg = wb.createFont();
        fontNeg.setBoldweight(Font.BOLDWEIGHT_BOLD);
        fontNeg.setFontHeightInPoints((short) 9);
        // fuente solo tama�o 10 sin segrita
        Font fontGene = wb.createFont();
        fontGene.setFontHeightInPoints((short) 9);

        CellStyle style = wb.createCellStyle();
        style.setAlignment(CellStyle.ALIGN_CENTER/* CellStyle.ALIGN_CENTER*/);
        style.setBorderTop(CellStyle.BORDER_THIN);
        style.setBorderBottom(CellStyle.BORDER_THIN);
        style.setBorderRight(CellStyle.BORDER_THIN);
        style.setBorderLeft(CellStyle.BORDER_THIN);
        style.setFont(fontNeg);

        // cabecera de la tabla
        Font headerCabe = wb.createFont();
        //headerCab.setBoldweight(Font.BOLDWEIGHT_BOLD);
        CellStyle styleCabe = wb.createCellStyle();
        styleCabe.setFillPattern(CellStyle.SOLID_FOREGROUND);
        styleCabe.setFillForegroundColor(IndexedColors.LEMON_CHIFFON.getIndex());
        styleCabe.setBorderTop(CellStyle.BORDER_THIN);
        styleCabe.setBorderBottom(CellStyle.BORDER_THIN);
        styleCabe.setBorderRight(CellStyle.BORDER_THIN);
        styleCabe.setBorderLeft(CellStyle.BORDER_THIN);
        styleCabe.setAlignment(CellStyle.ALIGN_CENTER/* CellStyle.ALIGN_CENTER*/);
        styleCabe.setVerticalAlignment(CellStyle.VERTICAL_JUSTIFY);
        headerCabe.setFontHeightInPoints((short) 9);
        styleCabe.setFont(headerCabe);

        CellStyle styleTitlIzqGene = wb.createCellStyle();
        styleTitlIzqGene.setFillPattern(CellStyle.SOLID_FOREGROUND);
        styleTitlIzqGene.setFillForegroundColor(IndexedColors.WHITE.getIndex());
        styleTitlIzqGene.setBorderTop(CellStyle.BORDER_THIN);
        styleTitlIzqGene.setBorderBottom(CellStyle.BORDER_THIN);
        styleTitlIzqGene.setBorderRight(CellStyle.BORDER_THIN);
        styleTitlIzqGene.setBorderLeft(CellStyle.BORDER_THIN);
        styleTitlIzqGene.setAlignment(CellStyle.ALIGN_LEFT);
        styleTitlIzqGene.setFont(fontGene);

        int sizeHoja = 19
                + datos.getTblCS().size()
                + datos.getTblCa().size()
                + datos.getTblGT().size()
                + datos.getTblPS().size()
                + datos.getTblSe().size();

        int fin = 13 + datos.getTblCS().size()
                + datos.getTblCa().size()
                + datos.getTblGT().size()
                + datos.getTblPS().size()
                + datos.getTblSe().size();

        int acumPosition = 0;
        boolean bandera1 = false;
        boolean bandera2 = false;
        boolean bandera3 = false;
        boolean bandera4 = false;

        boolean cabeTbl1 = false;
        boolean cabeTbl2 = false;
        boolean cabeTbl3 = false;
        boolean cabeTbl4 = false;

        boolean cabeTbl5 = false;
        boolean cabeTbl6 = false;

        System.out.println("sizeHoja " + sizeHoja);

        // estilo que convierte a solo numero la celda
        CellStyle styleNumero = wb.createCellStyle();
        styleNumero.setBorderTop(CellStyle.BORDER_THIN);
        styleNumero.setBorderBottom(CellStyle.BORDER_THIN);
        styleNumero.setBorderRight(CellStyle.BORDER_THIN);
        styleNumero.setBorderLeft(CellStyle.BORDER_THIN);
        styleNumero.setDataFormat(wb.createDataFormat().getFormat("0.00"));
        styleNumero.setFont(fontGene);
        // estilo que convierte a solo porcentaje la celda
        CellStyle stylePorcentaje = wb.createCellStyle();
        stylePorcentaje.setBorderTop(CellStyle.BORDER_THIN);
        stylePorcentaje.setBorderBottom(CellStyle.BORDER_THIN);
        stylePorcentaje.setBorderRight(CellStyle.BORDER_THIN);
        stylePorcentaje.setBorderLeft(CellStyle.BORDER_THIN);
        stylePorcentaje.setDataFormat(wb.createDataFormat().getFormat("0.00%"));
        stylePorcentaje.setFont(fontGene);

        try {

            for (int re = 0; re < sizeHoja; ++re) {
                Row fila = hoja.createRow(re);

                if (re == 0) {
                    for (int j = 0; j < 8; ++j) {
                        Cell celda2 = fila.createCell(j);
                        celda2.setCellStyle(style);
                        if (j == 0) {
                            celda2.setCellValue("CUADRO DE COSTOS INDIRECTOS");
                        } else if (j == 7) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 0, 7));
                        }
                    }
                }

                if (re == 1) {
                    for (int j = 0; j < 8; ++j) {
                        Cell celda2 = fila.createCell(j);
                        celda2.setCellStyle(style);
                        if (j == 1) {
                            celda2.setCellValue("COSTO DIRECTO");
                        }
                        if (j == 3) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 2));
                            celda2.setCellValue(Double.parseDouble(datos.getCostIndirecto()));
                            celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                            celda2.setCellStyle(styleNumero);
                            hoja.setColumnWidth((short) j, 620);
                            hoja.autoSizeColumn((short) 3, true);
                        }
                        if (j == 4) {
                            celda2.setCellValue("PORCENTAJE");
                        }
                        if (j == 6) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 4, 5));
                            celda2.setCellValue(Double.parseDouble(datos.getPorcent()));
                            celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                            //celda2.setCellStyle(stylePorcentaje);
                        }
                    }
                }

                if (re == 2) {
                    for (int j = 0; j < 8; ++j) {
                        Cell celda2 = fila.createCell(j);
                        celda2.setCellStyle(styleCabe);
                        celda2.setCellValue(cabecera[j]);
                        if (j == 2) {
                            hoja.setColumnWidth((short) j, 630);
                            hoja.autoSizeColumn((short) 2, true);
                        }

                    }
                }

                if (re == 3) {
                    for (int j = 0; j < 8; ++j) {
                        Cell celda2 = fila.createCell(j);
                        celda2.setCellStyle(style);
                        celda2.setCellValue("");

                    }
                }

                if (re == 4) {
                    for (int j = 0; j < 8; ++j) {
                        Cell celda2 = fila.createCell(j);
                        celda2.setCellStyle(style);
                        if (j == 1) {
                            celda2.setCellValue("GRUPO TECNICO");
                            celda2.setCellStyle(style);
                        } else if (j == 2) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 2));
                            celda2.setCellStyle(style);
                        } else {
                            celda2.setCellValue("");
                        }
                    }
                } // FIN 4

                if (re == 5) {
                    int positionInicial = re;
                    // tabla GT
                    int tblSize = datos.getTblGT().size();
                    for (int size = 0; size < tblSize; ++size) {
                        fila = hoja.createRow(re);
                        for (int j = 0; j < 8; j++) {
                            Cell celda2 = fila.createCell(j);
                            celda2.setCellStyle(style);

                            if (j == 0) {
                                celda2.setCellValue(Double.parseDouble(datos.getTblGT().get(size).get(0)));
                                celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                            }
                            if (j == 1) {
                                celda2.setCellValue(datos.getTblGT().get(size).get(1));
                                hoja.setColumnWidth((short) j, 620);
                                hoja.autoSizeColumn((short) 1, true);
                                celda2.setCellStyle(styleTitlIzqGene);
                            }
                            if (j == 2) {
                                celda2.setCellValue(Double.parseDouble(datos.getTblGT().get(size).get(2)));
                                celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                celda2.setCellStyle(styleNumero);
                            }
                            if (j == 3) {
                                celda2.setCellValue(Double.parseDouble(datos.getTblGT().get(size).get(3)));
                                celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                celda2.setCellStyle(styleNumero);

                            }
                            if (j == 4) {
                                //celda2.setCellValue(Double.parseDouble(datos.getTblGT().get(size).get(4)));
                                //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                //celda2.setCellStyle(styleNumero);
                                //
                                String strFormula = "SUM(C" + (re + 1) + "*4)";
                                celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                celda2.setCellFormula(strFormula);
                                celda2.setCellStyle(styleNumero);
                            }
                            if (j == 5) {
                                //celda2.setCellValue(Double.parseDouble(datos.getTblGT().get(size).get(5)));
                                //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                //celda2.setCellStyle(styleNumero);
                                String strFormula = "SUM(C" + (re + 1) + "*A" + (re + 1) + "*D" + (re + 1) + ")";
                                celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                celda2.setCellFormula(strFormula);
                                celda2.setCellStyle(styleNumero);

                            }
                            if (j == 6) {
                                if (datos.getTblGT().get(size).get(6).length() > 0) {
                                    //celda2.setCellValue(Double.parseDouble(datos.getTblGT().get(size).get(6)));
                                    //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    //celda2.setCellStyle(styleNumero);
                                    // con formula}
                                    String strFormula = "SUM(F" + (positionInicial + 1) + ":F" + (positionInicial + tblSize) + ")";
                                    celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                    celda2.setCellFormula(strFormula);
                                    celda2.setCellStyle(styleNumero);
                                }
                            }
                            if (j == 7) {
                                if (datos.getTblGT().get(size).get(7).length() > 0) {
                                    //double val = Double.parseDouble(setDeletePorc(datos.getTblGT().get(size).get(7)));
                                    //val = val / 100;
                                    //celda2.setCellValue(val);
                                    //celda2.setCellStyle(stylePorcentaje);

                                    String strFormula = "SUM(G" + (re + 1) + "/D" + (2) + ")";
                                    celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                    celda2.setCellFormula(strFormula);
                                    celda2.setCellStyle(stylePorcentaje);
                                }
                            }
                        }
                        re++;
                    }
                    acumPosition = re;
                    cabeTbl1 = true;
                }

                // damos espacio
                if (cabeTbl1 == true) {
                    for (int i = 0; i < 2; ++i) {
                        fila = hoja.createRow(re);
                        if (i == 0) {
                            for (int j = 0; j < 8; ++j) {
                                Cell celda2 = fila.createCell(j);
                                celda2.setCellStyle(style);
                                celda2.setCellValue("");

                            }
                            re++;
                        } else {
                            for (int j = 0; j < 8; ++j) {
                                Cell celda2 = fila.createCell(j);
                                celda2.setCellStyle(style);
                                if (j == 1) {
                                    celda2.setCellValue("PERSONAL DE SOPORTE");
                                } else if (j == 2) {
                                    hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 2));
                                    celda2.setCellStyle(styleTitlIzqGene);
                                } else {
                                    celda2.setCellValue("");
                                }

                            }
                            re++;
                        }
                    }
                    acumPosition = re;
                    cabeTbl1 = false;
                    bandera1 = true;
                }

                // tabla 2
                if (bandera1 == true) {
                    if (re == acumPosition) {
                        int tblSize = datos.getTblPS().size();
                        for (int size = 0; size < tblSize; ++size) {
                            fila = hoja.createRow(re);
                            for (int j = 0; j < 8; j++) {
                                Cell celda2 = fila.createCell(j);
                                celda2.setCellStyle(style);

                                if (j == 0) {
                                    celda2.setCellValue(Double.parseDouble(datos.getTblPS().get(size).get(0)));
                                    celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                }
                                if (j == 1) {
                                    celda2.setCellValue(datos.getTblPS().get(size).get(1));
                                    celda2.setCellStyle(styleTitlIzqGene);
                                }
                                if (j == 2) {
                                    celda2.setCellValue(Double.parseDouble(datos.getTblPS().get(size).get(2)));
                                    celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    celda2.setCellStyle(styleNumero);
                                }
                                if (j == 3) {
                                    celda2.setCellValue(Double.parseDouble(datos.getTblPS().get(size).get(3)));
                                    celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    celda2.setCellStyle(styleNumero);
                                }
                                if (j == 4) {
                                    //celda2.setCellValue(Double.parseDouble(datos.getTblPS().get(size).get(4)));
                                    //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    //celda2.setCellStyle(styleNumero);
                                    String strFormula = "SUM(C" + (re + 1) + "*4)";
                                    celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                    celda2.setCellFormula(strFormula);
                                    celda2.setCellStyle(styleNumero);
                                }
                                if (j == 5) {
                                    /*celda2.setCellValue(Double.parseDouble(datos.getTblPS().get(size).get(5)));
                                    celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    celda2.setCellStyle(styleNumero);*/
                                    String strFormula = "SUM(C" + (re + 1) + "*A" + (re + 1) + "*D" + (re + 1) + ")";
                                    celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                    celda2.setCellFormula(strFormula);
                                    celda2.setCellStyle(styleNumero);
                                }
                                if (j == 6) {
                                    if (datos.getTblPS().get(size).get(6).length() > 0) {
                                        /*celda2.setCellValue(Double.parseDouble(datos.getTblPS().get(size).get(6)));
                                        celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        celda2.setCellStyle(styleNumero);*/

                                        String strFormula = "SUM(F" + (re + 1) + ":F" + (re + tblSize) + ")";
                                        celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                        celda2.setCellFormula(strFormula);
                                        celda2.setCellStyle(styleNumero);
                                    }
                                }
                                if (j == 7) {
                                    if (datos.getTblPS().get(size).get(7).length() > 0) {
                                        //double val = Double.parseDouble(setDeletePorc(datos.getTblPS().get(size).get(7)));
                                        //val = val / 100;
                                        //celda2.setCellValue(val);
                                        //celda2.setCellStyle(stylePorcentaje);

                                        String strFormula = "SUM(G" + (re + 1) + "/D" + (2) + ")";
                                        celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                        celda2.setCellFormula(strFormula);
                                        celda2.setCellStyle(stylePorcentaje);
                                    }
                                }
                            }
                            re++;
                        }
                        acumPosition = re;
                        bandera1 = false;
                        cabeTbl2 = true;
                    }

                    // damos espacio para tabla 3
                    if (cabeTbl2 == true) {
                        for (int i = 0; i < 2; ++i) {
                            fila = hoja.createRow(re);
                            if (i == 0) {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    celda2.setCellValue("");

                                }
                            } else {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    if (j == 1) {
                                        celda2.setCellValue("COSTOS SEMANALES");
                                    } else if (j == 2) {
                                        hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 2));
                                        celda2.setCellStyle(styleTitlIzqGene);
                                    } else {
                                        celda2.setCellValue("");
                                    }
                                }
                            }
                            re++;
                        }
                        cabeTbl2 = false;
                        bandera2 = true;
                        acumPosition = re;
                    }
                    // tabla 3
                    if (bandera2 == true) {
                        if (acumPosition == re) {
                            int tblSize = datos.getTblCS().size();
                            for (int size = 0; size < tblSize; ++size) {
                                fila = hoja.createRow(re);
                                for (int j = 0; j < 8; j++) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    if (j == 0) {
                                        celda2.setCellValue(Double.parseDouble(datos.getTblCS().get(size).get(0)));
                                        celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    }
                                    if (j == 1) {
                                        celda2.setCellValue(datos.getTblCS().get(size).get(1));
                                        celda2.setCellStyle(styleTitlIzqGene);
                                    }
                                    if (j == 2) {
                                        celda2.setCellValue(Double.parseDouble(datos.getTblCS().get(size).get(2)));
                                        celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        celda2.setCellStyle(styleNumero);
                                    }
                                    if (j == 3) {
                                        celda2.setCellValue(Double.parseDouble(datos.getTblCS().get(size).get(3)));
                                        celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        celda2.setCellStyle(styleNumero);
                                    }
                                    if (j == 4) {
                                        celda2.setCellValue("");
                                        //System.out.println("ssds "+datos.getTblPS().get(size).get(6).toString());
                                        //if (datos.getTblPS().get(size).get(4).length() > 0) {
                                        //  celda2.setCellValue(Double.parseDouble(datos.getTblCS().get(size).get(4)));
                                        //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        //}
                                    }
                                    if (j == 5) {
                                        /*celda2.setCellValue(Double.parseDouble(datos.getTblCS().get(size).get(5)));
                                        celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        celda2.setCellStyle(styleNumero);*/
                                        String strFormula = "SUM(C" + (re + 1) + "*A" + (re + 1) + "*D" + (re + 1) + ")";
                                        celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                        celda2.setCellFormula(strFormula);
                                        celda2.setCellStyle(styleNumero);
                                    }
                                    if (j == 6) {
                                        if (datos.getTblCS().get(size).get(6).length() > 0) {
                                            /*celda2.setCellValue(Double.parseDouble(datos.getTblCS().get(size).get(6)));
                                            celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                            celda2.setCellStyle(styleNumero);*/
                                            String strFormula = "SUM(F" + (re + 1) + ":F" + (re + tblSize) + ")";
                                            celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                            celda2.setCellFormula(strFormula);
                                            celda2.setCellStyle(styleNumero);
                                        }
                                    }
                                    if (j == 7) {
                                        if (datos.getTblCS().get(size).get(7).length() > 0) {
                                            //double val = Double.parseDouble(setDeletePorc(datos.getTblCS().get(size).get(7)));
                                            //val = val / 100;
                                            //celda2.setCellValue(val);
                                            //celda2.setCellStyle(stylePorcentaje);

                                            String strFormula = "SUM(G" + (re + 1) + "/D" + (2) + ")";
                                            celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                            celda2.setCellFormula(strFormula);
                                            celda2.setCellStyle(stylePorcentaje);
                                        }
                                    }

                                }
                                re++;
                            }
                            acumPosition = re;
                            bandera2 = false;
                            cabeTbl3 = true;
                        }
                    }
                    // espacios para tabla 4
                    if (cabeTbl3 == true) {
                        for (int i = 0; i < 2; ++i) {
                            fila = hoja.createRow(re);
                            if (i == 0) {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    celda2.setCellValue("");

                                }
                            } else {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    if (j == 1) {
                                        celda2.setCellValue("CAMPAMENTO");
                                    } else if (j == 2) {
                                        hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 2));
                                        celda2.setCellStyle(styleTitlIzqGene);
                                    } else {
                                        celda2.setCellValue("");
                                    }
                                }
                            }
                            re++;
                        }
                        cabeTbl3 = false;
                        bandera3 = true;
                        acumPosition = re;
                    }

                    // tabla 4
                    if (bandera3 == true) {
                        if (acumPosition == re) {
                            int tblSize = datos.getTblCa().size();
                            for (int size = 0; size < tblSize; ++size) {
                                fila = hoja.createRow(re);
                                for (int j = 0; j < 8; j++) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    if (j == 0) {
                                        celda2.setCellValue(Double.parseDouble(datos.getTblCa().get(size).get(0)));
                                        celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    }
                                    if (j == 1) {
                                        celda2.setCellValue(datos.getTblCa().get(size).get(1));
                                        celda2.setCellStyle(styleTitlIzqGene);
                                    }
                                    if (j == 2) {
                                        celda2.setCellValue(Double.parseDouble(datos.getTblCa().get(size).get(2)));
                                        celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        celda2.setCellStyle(styleNumero);
                                    }
                                    if (j == 3) {
                                        celda2.setCellValue(Double.parseDouble(datos.getTblCa().get(size).get(3)));
                                        celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        celda2.setCellStyle(styleNumero);
                                    }
                                    if (j == 4) {
                                        celda2.setCellValue("");
                                        //System.out.println("ssds "+datos.getTblPS().get(size).get(6).toString());
                                        //if (datos.getTblPS().get(size).get(4).length() > 0) {
                                        //  celda2.setCellValue(Double.parseDouble(datos.getTblCS().get(size).get(4)));
                                        //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        //}
                                    }
                                    if (j == 5) {
                                        /*celda2.setCellValue(Double.parseDouble(datos.getTblCa().get(size).get(5)));
                                        celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        celda2.setCellStyle(styleNumero);*/
                                        String strFormula = "SUM(C" + (re + 1) + "*A" + (re + 1) + "*D" + (re + 1) + ")";
                                        celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                        celda2.setCellFormula(strFormula);
                                        celda2.setCellStyle(styleNumero);
                                    }
                                    if (j == 6) {
                                        if (datos.getTblCa().get(size).get(6).length() > 0) {
                                            /*celda2.setCellValue(Double.parseDouble(datos.getTblCa().get(size).get(6)));
                                            celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                            celda2.setCellStyle(styleNumero);*/
                                            String strFormula = "SUM(F" + (re + 1) + ":F" + (re + tblSize) + ")";
                                            celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                            celda2.setCellFormula(strFormula);
                                            celda2.setCellStyle(styleNumero);
                                        }
                                    }
                                    if (j == 7) {
                                        if (datos.getTblCa().get(size).get(7).length() > 0) {
                                            //double val = Double.parseDouble(setDeletePorc(datos.getTblCa().get(size).get(7)));
                                            //val = val / 100;
                                            //celda2.setCellValue(val);
                                            //celda2.setCellStyle(stylePorcentaje);
                                            String strFormula = "SUM(G" + (re + 1) + "/D" + (2) + ")";
                                            celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                            celda2.setCellFormula(strFormula);
                                            celda2.setCellStyle(stylePorcentaje);
                                        }
                                    }

                                }
                                re++;
                            }
                            acumPosition = re;
                            bandera3 = false;
                            cabeTbl4 = true;
                        }
                    }

                    // cabecera tbl 5
                    // espacios para tabla 4
                    if (cabeTbl4 == true) {
                        for (int i = 0; i < 2; ++i) {
                            fila = hoja.createRow(re);
                            if (i == 0) {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    celda2.setCellValue("");

                                }
                            } else {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    if (j == 1) {
                                        celda2.setCellValue("SEGUROS");
                                    } else if (j == 2) {
                                        hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 2));
                                        celda2.setCellStyle(styleTitlIzqGene);
                                    } else {
                                        celda2.setCellValue("");
                                    }
                                }
                            }
                            re++;
                        }
                        cabeTbl4 = false;
                        bandera4 = true;
                        acumPosition = re;
                    }
                    // TBL SGT
                    if (bandera4 == true) {
                        if (acumPosition == re) {
                            int tblSize = datos.getTblSe().size();
                            for (int size = 0; size < tblSize; ++size) {
                                fila = hoja.createRow(re);
                                for (int j = 0; j < 8; j++) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    if (j == 0) {
                                        celda2.setCellValue("");
                                        //celda2.setCellValue(Double.parseDouble(datos.getTblSe().get(size).get(0)));
                                        //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    }
                                    if (j == 1) {
                                        celda2.setCellValue(datos.getTblSe().get(size).get(1));
                                        celda2.setCellStyle(styleTitlIzqGene);
                                    }
                                    if (j == 2) {
                                        celda2.setCellValue("");
                                        //celda2.setCellValue(Double.parseDouble(datos.getTblSe().get(size).get(2)));
                                        //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    }
                                    if (j == 3) {
                                        celda2.setCellValue("");
                                        //celda2.setCellValue(Double.parseDouble(datos.getTblSe().get(size).get(3)));
                                        //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    }
                                    if (j == 4) {
                                        celda2.setCellValue("");
                                        //System.out.println("ssds "+datos.getTblPS().get(size).get(6).toString());
                                        //if (datos.getTblPS().get(size).get(4).length() > 0) {
                                        //  celda2.setCellValue(Double.parseDouble(datos.getTblCS().get(size).get(4)));
                                        //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        //}
                                    }
                                    if (j == 5) {
                                        celda2.setCellValue(Double.parseDouble(datos.getTblSe().get(size).get(5)));
                                        celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        celda2.setCellStyle(styleNumero);
                                    }
                                    if (j == 6) {
                                        if (datos.getTblSe().get(size).get(6).length() > 0) {
                                            /*celda2.setCellValue(Double.parseDouble(datos.getTblSe().get(size).get(6)));
                                            celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                            celda2.setCellStyle(styleNumero);*/
                                            String strFormula = "SUM(D2*0.05)";
                                            celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                            celda2.setCellFormula(strFormula);
                                            celda2.setCellStyle(styleNumero);

                                        }
                                    }
                                    if (j == 7) {
                                        if (datos.getTblSe().get(size).get(7).length() > 0) {
                                            //double val = Double.parseDouble(setDeletePorc(datos.getTblSe().get(size).get(7)));
                                            //val = val / 100;
                                            //celda2.setCellValue(val);
                                            //celda2.setCellStyle(stylePorcentaje);

                                            String strFormula = "SUM(G" + (re + 1) + "/D" + (2) + ")";
                                            celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                            celda2.setCellFormula(strFormula);
                                            celda2.setCellStyle(stylePorcentaje);
                                        }
                                    }

                                }
                                re++;
                            }
                            acumPosition = re;
                            bandera4 = false;
                            cabeTbl5 = true;
                        }
                    }

                    // colocamos total
                    if (cabeTbl5 == true) {
                        for (int i = 1; i < 2; ++i) {
                            fila = hoja.createRow(re);
                            if (i == 1) {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    if (j == 1) {
                                        celda2.setCellValue("TOTAL");
                                    }
                                    if (j == 5) {
                                        //celda2.setCellValue(Double.parseDouble(datos.getTotSubtotal()));
                                        //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        //celda2.setCellStyle(styleNumero);
                                        String strFormula = "SUM(F1:F" + (fin) + ")";
                                        celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                        celda2.setCellFormula(strFormula);
                                        celda2.setCellStyle(styleNumero);
                                    }
                                    if (j == 6) {
                                        //celda2.setCellValue(Double.parseDouble(datos.getTotParcial()));
                                        //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                        //celda2.setCellStyle(styleNumero);

                                        String strFormula = "SUM(G1:G" + (fin) + ")";
                                        celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                        celda2.setCellFormula(strFormula);
                                        celda2.setCellStyle(styleNumero);
                                    }
                                    if (j == 7) {
                                        //double val = Double.parseDouble(setDeletePorc(datos.getIndirect()));
                                        //val = val / 100;
                                        //celda2.setCellValue(val);
                                        //celda2.setCellStyle(styleNumero);

                                        String strFormula = "SUM(H1:H" + (fin) + ")";
                                        celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                        celda2.setCellFormula(strFormula);
                                        celda2.setCellStyle(stylePorcentaje);
                                    }
                                }
                            }
                            re++;
                        }
                        cabeTbl5 = false;
                        cabeTbl6 = true;
                        acumPosition = re;
                    }

                    // lo demas
                    if (cabeTbl6 == true) {
                        for (int i = 0; i < 5; ++i) {
                            fila = hoja.createRow(re);
                            if (i == 0) {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(style);
                                    celda2.setCellValue("");
                                }
                                hoja.addMergedRegion(new CellRangeAddress(re, re, 0, 7));
                            }

                            if (i == 1) {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    if (j == 6) {
                                        celda2.setCellValue("INDIRECTOS");
                                        celda2.setCellStyle(style);
                                    }
                                    if (j == 7) {
                                        //double val = Double.parseDouble(setDeletePorc(datos.getIndirect()));
                                        //val = val / 100;
                                        //celda2.setCellValue(val);
                                        //celda2.setCellStyle(stylePorcentaje);

                                        String strFormula = "SUM(H" + (fin + 1) + ")";
                                        celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                        celda2.setCellFormula(strFormula);
                                        celda2.setCellStyle(stylePorcentaje);
                                    }
                                }
                            }

                            if (i == 2) {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    if (j == 6) {
                                        celda2.setCellValue("IMPREVISTOS");
                                        celda2.setCellStyle(style);
                                    }
                                    if (j == 7) {
                                        double val = Double.parseDouble(setDeletePorc(datos.getImprevist()));
                                        val = val / 100;
                                        celda2.setCellValue(val);
                                        celda2.setCellStyle(stylePorcentaje);
                                    }
                                }
                            }

                            if (i == 3) {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    if (j == 6) {
                                        celda2.setCellValue("UTILIDAD");
                                        celda2.setCellStyle(style);
                                    }
                                    if (j == 7) {
                                        double val = Double.parseDouble(setDeletePorc(datos.getUtilidad()));
                                        val = val / 100;
                                        celda2.setCellValue(val);
                                        celda2.setCellStyle(stylePorcentaje);
                                    }
                                }
                            }

                            if (i == 4) {
                                for (int j = 0; j < 8; ++j) {
                                    Cell celda2 = fila.createCell(j);
                                    if (j == 6) {
                                        celda2.setCellValue("TOTAL");
                                        celda2.setCellStyle(style);
                                    }
                                    if (j == 7) {
                                        //double val = Double.parseDouble(setDeletePorc(datos.getTotal()));
                                        //val = val / 100;
                                        //celda2.setCellValue(val);
                                        //celda2.setCellStyle(stylePorcentaje);

                                        String strFormula = "SUM(H" + (fin + 2) + ":H" + (fin + 5) + ")";
                                        celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                        celda2.setCellFormula(strFormula);
                                        celda2.setCellStyle(stylePorcentaje);
                                    }
                                }
                            }
                            re++;
                        }

                    }
                    cabeTbl6 = false;
                }

                ///
            }// fin for

            wb.write(new FileOutputStream(archivo));
            respuesta = "Exportación exitosa.";
            datos = null;
        } catch (IOException | NumberFormatException e) {
            System.out.println("Err-CostIndi... " + e.getMessage());
        }
        return respuesta;
    }

    // metodo para eliminar (%) 
    private String setDeletePorc(String dto) {
        return dto.replace("%", "");
    }
    /*
    poner en porcentaje para los calculos
    
                String aux = jTextField1.getText();
                String aux1 = aux.replace('%', '');
     */
}
