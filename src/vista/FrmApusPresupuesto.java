/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor


 * @author Jonathan Mullito :)

 */
package vista;

import com.google.gson.Gson;
import com.google.gson.reflect.TypeToken;
import controlador.presupuestoController;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import modelo.EsquemaPresupuesto;
import modelo.EsquemaPresupuestoManual;
import modelo.EsquemaPresupuestoManualTabla;
import modelo.FormatoApus;
import modelo.Presupuesto;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.ss.usermodel.Cell;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.ClientAnchor;
import org.apache.poi.ss.usermodel.CreationHelper;
import org.apache.poi.ss.usermodel.Drawing;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.apache.poi.ss.usermodel.Picture;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Sheet;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.ss.util.CellRangeAddress;
import org.apache.poi.util.IOUtils;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import util.validaciones;

/**
 *
 * @author Jonathan
 */
public class FrmApusPresupuesto extends javax.swing.JInternalFrame {

    /**
     * Creates new form FrmApusPresupuesto
     */
    // variable para caracter
    private Character kpress;

    // instancia de validaciones
    final private validaciones validacion;

    // variables para exportar contenido a excel
    JFileChooser selecArchivo = new JFileChooser();
    File archivo;
    Workbook wb;

    final String[] cabeceraResumenApus = {"NUMERACION", "DESCRIPCION", "UNIDAD", "CANTIDAD", "PRECIO UNITARIO", "PRECIO TOTAL"};
    final String[] insertRow = {"", "", "", "0", "0.0", "0.0"};

    private Presupuesto dtos;
    private presupuestoController ctrPres = new presupuestoController();

    public FrmApusPresupuesto() {
        validacion = new validaciones();
        initComponents();
        setTitle("Presupuesto / Ofertas");
        jLabel4.setVisible(false);
        setTablesNoMoveHeader();
        setIconifiable(true);

        jTextField1.setToolTipText("Proyecto");
        jTextField2.setToolTipText("Empresa");
        jTextField3.setToolTipText("INGENIERIA HIDROSANITARIA");
        jTextField5.setToolTipText("Fecha");
        jTextField13.setToolTipText("DIRIGIDO");

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jTextField5 = new javax.swing.JTextField();
        jPanel1 = new javax.swing.JPanel();
        jTextField6 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jTextField7 = new javax.swing.JTextField();
        jTextField8 = new javax.swing.JTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jTextField9 = new javax.swing.JTextField();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        jButton5 = new javax.swing.JButton();
        jTextField10 = new javax.swing.JTextField();
        jTextField11 = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jTextField12 = new javax.swing.JTextField();
        jTextField13 = new javax.swing.JTextField();

        jMenu1.setText("jMenu1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTextField1.setText("PARQUE ACUATICO DE MILAGRO");
        getContentPane().add(jTextField1, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 12, 649, -1));

        jTextField2.setText("MALECON DEL VELERO");
        getContentPane().add(jTextField2, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 37, 649, -1));

        jTextField3.setText("INGENIERIA HIDROSANITARIA");
        getContentPane().add(jTextField3, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 63, 649, -1));

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagen/cerrar.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(828, 0, 38, 38));

        jTextField4.setText("OFERTA: INGEHISA");
        jTextField4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField4ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField4, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 115, 233, -1));

        jTextField5.setText("Guayaquil, ");
        getContentPane().add(jTextField5, new org.netbeans.lib.awtextra.AbsoluteConstraints(537, 115, 242, -1));

        jTextField6.setText("0.0");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel1.setText("SUBTOTAL");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel2.setText("IVA");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 10)); // NOI18N
        jLabel3.setText("TOTAL");

        jTextField7.setText("0.0");

        jTextField8.setText("0.0");

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Nota: En esta oferta no se incluye lo siguiente:"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setMinWidth(456);
            jTable1.getColumnModel().getColumn(0).setPreferredWidth(456);
            jTable1.getColumnModel().getColumn(0).setMaxWidth(456);
        }

        jTextField9.setText("0");
        jTextField9.setPreferredSize(new java.awt.Dimension(21, 20));
        jTextField9.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField9KeyPressed(evt);
            }
        });

        jButton6.setText("+");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setText("--");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton7)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 149, Short.MAX_VALUE)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel1)
                                .addComponent(jButton6)))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(5, 5, 5)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel2)
                                    .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButton7))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 94, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 379, 850, -1));

        jButton2.setText("+");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(335, 116, -1, 25));

        jButton3.setText("Calcular");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton3, new org.netbeans.lib.awtextra.AbsoluteConstraints(789, 112, -1, -1));

        jButton4.setText("Generar");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton4, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 11, -1, -1));

        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "No", "RUBRO", "UNIDAD", "CANTIDAD", "PRECIO UNIT", "PRECIO TOT"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        table.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                tableKeyPressed(evt);
            }
        });
        jScrollPane1.setViewportView(table);
        if (table.getColumnModel().getColumnCount() > 0) {
            table.getColumnModel().getColumn(0).setMinWidth(40);
            table.getColumnModel().getColumn(0).setPreferredWidth(40);
            table.getColumnModel().getColumn(0).setMaxWidth(55);
            table.getColumnModel().getColumn(1).setMinWidth(480);
            table.getColumnModel().getColumn(1).setPreferredWidth(480);
            table.getColumnModel().getColumn(1).setMaxWidth(480);
            table.getColumnModel().getColumn(2).setMinWidth(60);
            table.getColumnModel().getColumn(2).setPreferredWidth(60);
            table.getColumnModel().getColumn(2).setMaxWidth(60);
            table.getColumnModel().getColumn(3).setMinWidth(70);
            table.getColumnModel().getColumn(3).setPreferredWidth(70);
            table.getColumnModel().getColumn(3).setMaxWidth(70);
            table.getColumnModel().getColumn(4).setMinWidth(90);
            table.getColumnModel().getColumn(4).setPreferredWidth(90);
            table.getColumnModel().getColumn(4).setMaxWidth(90);
            table.getColumnModel().getColumn(5).setMinWidth(90);
            table.getColumnModel().getColumn(5).setPreferredWidth(90);
            table.getColumnModel().getColumn(5).setMaxWidth(90);
        }

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 140, 850, 230));

        jButton5.setText("--");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton5, new org.netbeans.lib.awtextra.AbsoluteConstraints(375, 116, -1, 25));

        jTextField10.setText("Id Presu...");
        jTextField10.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField10KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField10KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField10, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 40, 78, -1));

        jTextField11.setText("Id Apus...");
        jTextField11.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTextField11KeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTextField11KeyTyped(evt);
            }
        });
        getContentPane().add(jTextField11, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 85, 78, -1));

        jLabel4.setText("0");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(754, 66, -1, -1));

        jCheckBox1.setText("Manual");
        jCheckBox1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jCheckBox1MouseClicked(evt);
            }
        });
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });
        jCheckBox1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jCheckBox1KeyPressed(evt);
            }
        });
        getContentPane().add(jCheckBox1, new org.netbeans.lib.awtextra.AbsoluteConstraints(754, 11, -1, -1));

        jTextField12.setText("1 | 0");
        getContentPane().add(jTextField12, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 63, 78, -1));

        jTextField13.setText("DIRIGIDO");
        jTextField13.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField13ActionPerformed(evt);
            }
        });
        getContentPane().add(jTextField13, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 88, 649, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.dispose();
        FrmApus.activoFrmResumen = false;
        home.activoFrmResumen = false;
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tableKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tableKeyPressed
        // table Calculo keyPress tabla Resumen
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            //setEventTableResumenPresupuesto();

            /*int position = table.getSelectedRow();
            table.setRowHeight(position, 50);
            String dto = table.getValueAt(position, 1).toString();
            table.setValueAt( dto + "<br>", position, 1);*/
        }// fin keyPress

        // hacer una clase para esto y solo llamarla desde cualquier tabla del sistema
        int suprimir = evt.getKeyCode();
        if (suprimir == 127) {
            int position = table.getSelectedRow();
            int columna = table.getSelectedColumn();
            table.setValueAt("", position, columna);
        }
    }//GEN-LAST:event_tableKeyPressed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // AGREGO NUEVA CELDA EN BLANCO
        //Sección 1 
        DefaultTableModel modelo = (DefaultTableModel) table.getModel();
        //Sección 2
        Object[] fila = new Object[6];
        //Sección 3
        fila[0] = "";
        fila[1] = "";
        fila[2] = "";
        fila[3] = "0";
        fila[4] = "0.0";
        fila[5] = "0.0";
        //Sección 4
        modelo.addRow(fila);
        //Sección 5
        table.setModel(modelo);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // pensar como hacer el for de la tabla
        calTableSubTot();
        calIvaAndTot();
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jTextField9KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField9KeyPressed
        // accion de iva
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            calIvaAndTot();
        }
    }//GEN-LAST:event_jTextField9KeyPressed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // Eliminar un registro
        //Sección 1
        DefaultTableModel model = (DefaultTableModel) table.getModel();
        //Sección 2
        int position = table.getSelectedRow();
        //Sección 3
        if (position < 0) {
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar una fila de la tabla");
        } else {
            //Sección 4
            int confirmar = JOptionPane.showConfirmDialog(null,
                    "Esta seguro que desea Eliminar el registro? ");
            //Sección 5 
            if (JOptionPane.OK_OPTION == confirmar) {
                //Sección 6
                model.removeRow(position);
                //Sección 7
                JOptionPane.showMessageDialog(null, "Registro Eliminado");
            }
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        //METODO EXPORTAR PRESUPUESTO / OFERTA :_: MANUALMENTE
        selecArchivo.setSelectedFile(new File("Presupuesto-0001.xlsx"));
        if (selecArchivo.showDialog(null, "Exportar") == JFileChooser.APPROVE_OPTION) {
            archivo = selecArchivo.getSelectedFile();
            if (archivo.getName().endsWith("xls") || archivo.getName().endsWith("xlsx")) {
                EsquemaPresupuestoManual datos = getEsquemaPresupuestoManual();
                JOptionPane.showMessageDialog(null, Exportar(archivo, datos) + "\n Formato ." + archivo.getName().substring(archivo.getName().lastIndexOf(".") + 1));
            } else {
                JOptionPane.showMessageDialog(null, "Elija un formato valido.");
            }
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // BTN ADD NOTA 
        //Sección 1 
        DefaultTableModel modelo = (DefaultTableModel) jTable1.getModel();
        //Sección 2
        Object[] fila = new Object[1];
        //Sección 3
        fila[0] = "";
        //Sección 4
        modelo.addRow(fila);
        //Sección 5
        jTable1.setModel(modelo);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        // DELETE NOTA 
        //Sección 1
        DefaultTableModel model = (DefaultTableModel) jTable1.getModel();
        //Sección 2
        int position = jTable1.getSelectedRow();
        //Sección 3
        if (position < 0) {
            JOptionPane.showMessageDialog(null,
                    "Debe seleccionar una fila de la tabla");
        } else {
            //Sección 4
            int confirmar = JOptionPane.showConfirmDialog(null,
                    "Esta seguro que desea Eliminar el registro? ");
            //Sección 5 
            if (JOptionPane.OK_OPTION == confirmar) {
                //Sección 6
                model.removeRow(position);
                //Sección 7
                JOptionPane.showMessageDialog(null, "Registro Eliminado");
            }
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // PARA INSERTAR UNA FILA
        // mensaaje con JOptionpanel         
        int btn = evt.getButton();
        if (btn == 3) {
            int confirmar = JOptionPane.showConfirmDialog(null, "Desea ingresar una fila",
                    "Confirmación", JOptionPane.YES_NO_OPTION);

            if (JOptionPane.OK_OPTION == confirmar) {
                DefaultTableModel model = (DefaultTableModel) table.getModel();

                int position = table.getSelectedRow();
                model.insertRow(position, insertRow);
            }
        }
    }//GEN-LAST:event_tableMouseClicked

    private void jTextField10KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField10KeyPressed
        // buscar presupuesto en bd y llenar con datos
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            String txt = jTextField10.getText();
            if (txt.length() > 0) {
                importDtsPresup(txt);
            }
        }
    }//GEN-LAST:event_jTextField10KeyPressed

    private void jTextField11KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField11KeyPressed
        // ARMAMOS EL PRESUPUESTO SEGUN APUS
        kpress = evt.getKeyChar();
        if (kpress == KeyEvent.VK_ENTER) {
            String txt = jTextField11.getText();
            if (txt.length() > 0) {
                importPresuSgnAPUS(txt);
            }
        }
    }//GEN-LAST:event_jTextField11KeyPressed

    private void jCheckBox1KeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jCheckBox1KeyPressed

    }//GEN-LAST:event_jCheckBox1KeyPressed

    private void jCheckBox1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jCheckBox1MouseClicked

    }//GEN-LAST:event_jCheckBox1MouseClicked

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // si esta desmarcado es con id de apus
        // si no esta marcado es un presupuesto manual --> no tiene APUS
        if (jCheckBox1.isSelected()) {
            // traemos el sgt
            int valor = ctrPres.getCountApusByPresupuestoManual();
            //System.out.println("sss " + valor);

            jTextField10.setText("Id Presu...");
            jTextField10.setEnabled(false);
            jLabel4.setText("0");
            jTextField11.setText("Id Apus...");
            jTextField11.setEnabled(false);

            //hacer conteo de consulta y traer oferta sgt
            jTextField12.setText("" + valor); // aqui el valor count
            // en txtField la oferta que sigue
            // traer si se duplica ese presupuesto manual 
            // select count(id_manual) from presupuesto where id_manual = 6  (valor + 1)
            int sgt = ctrPres.getCountPresupuestoManualById_manual(valor);
            String ofrt = "OFERTA: INGEHISA 00" + valor + " - REV 00" + (sgt + 1);
            jTextField4.setText(ofrt);
        } else {
            jTextField10.setText("Id Presu...");
            jTextField10.setEnabled(true);
            jLabel4.setText("0");
            jTextField11.setText("Id Apus...");
            jTextField11.setEnabled(true);
            jTextField12.setText(" 1 | 0");
            // hago consulta y count de manuales

            // limpiamos tabla, notas, subtotal, iva, subtotalIva, total
            limpiarTabla();
            limpiarTablaNotas();
        }
    }//GEN-LAST:event_jCheckBox1ActionPerformed

    private void jTextField4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField4ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField4ActionPerformed

    private void jTextField11KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField11KeyTyped
        // si lengt = 0  ::: Id Apus...
        if (jTextField11.getText().length() == 0) {
            jTextField11.setText("Id Apus...");
        }

    }//GEN-LAST:event_jTextField11KeyTyped

    private void jTextField10KeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextField10KeyTyped
        // si length = 0 ::: Id Presu...
        if (jTextField10.getText().length() == 0) {
            jTextField10.setText("Id Presu...");
        }
    }//GEN-LAST:event_jTextField10KeyTyped

    private void jTextField13ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField13ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField13ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FrmApusPresupuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FrmApusPresupuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FrmApusPresupuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FrmApusPresupuesto.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FrmApusPresupuesto().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    public static javax.swing.JButton jButton4;
    public static javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField10;
    private javax.swing.JTextField jTextField11;
    private javax.swing.JTextField jTextField12;
    private javax.swing.JTextField jTextField13;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    public static javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    private javax.swing.JTextField jTextField9;
    private javax.swing.JTable table;
    // End of variables declaration//GEN-END:variables

    // hacer que cabecera se quede fija y columnas alineadas a la derecha
    private void setTablesNoMoveHeader() {
        table.getTableHeader().setReorderingAllowed(false);

        DefaultTableCellRenderer cellRenderer = new DefaultTableCellRenderer();
        cellRenderer.setHorizontalAlignment(JLabel.RIGHT);
        // table 2 al 5
        for (int i = 2; i < 6; ++i) {
            table.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
            table.getColumnModel().getColumn(i).setCellRenderer(cellRenderer);
        }
    }

    // limpiar tabla
    private void limpiarTabla() {
        DefaultTableModel model1 = (DefaultTableModel) table.getModel();
        model1.setRowCount(0);
    }

    //limpiamos tabla notas
    private void limpiarTablaNotas() {
        DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
        model1.setRowCount(0);
    }

    // agrego los datos
    public void llenarTabla(List<EsquemaPresupuesto> dto) {
        // pongo las columnas fijas y no editable
        setTablesNoMoveHeader();
        int sizeRowCountTable = table.getRowCount();
        if (sizeRowCountTable > 0) {
            limpiarTabla();
        }//Sección 1 

        DefaultTableModel modelo = (DefaultTableModel) table.getModel();

        for (EsquemaPresupuesto esquemaPresupuesto : dto) {
            //Sección 2
            Object[] fila = new Object[6];
            //Sección 3
            fila[0] = esquemaPresupuesto.getCodigo(); // descripcion
            fila[1] = esquemaPresupuesto.getRubro(); // unidad
            fila[2] = esquemaPresupuesto.getUnidad(); // cantidad
            fila[3] = esquemaPresupuesto.getCantidad(); // tarifa (vacio)
            fila[4] = esquemaPresupuesto.getPreUnit(); // cost unit (vacio)
            fila[5] = esquemaPresupuesto.getPreTotM(); // cost unit (vacio)
            //Sección 4
            modelo.addRow(fila);
        }
        //Sección 5
        table.setModel(modelo);

    }

    private void setEventTableResumenPresupuesto() {
        int sizeRows = table.getRowCount();
        if (sizeRows > 0) {
            // vamos a calcular precio total
            int position = table.getSelectedRow();
            // traigo valor de cantidad [3]
            String cant = table.getValueAt(position, 3).toString();
            if (!cant.equals("")) { // columna cantidad no nula
                double cantAux = validacion.solomoney(cant);
                // R:[5]  = [3] * [4]
                double precUnit = validacion.solomoney(table.getValueAt(position, 4).toString());
                table.setValueAt(String.valueOf(precUnit), position, 4); // pongo el valor de validaciones

                double presiTot = (double) Math.round((cantAux * precUnit) * 100d) / 100d; // solo 2 decimales
                table.setValueAt(String.valueOf(presiTot), position, 5); //R: pongo el valor 

                table.setValueAt(String.valueOf(cantAux), position, 3); // pongo el valor de validaciones

                setDatosFrmApusWithPresupuestp();
                calTableSubTot();

            }// verificacion de columna cantidad no nula   
        }
    }

    //funcion de calculo Sutbtotal
    private void calTableSubTot() {
        int sizeRows = table.getRowCount();
        if (sizeRows > 0) {
            double acumSubTot = 0;
            for (int position = 0; position < sizeRows; ++position) {
                // vamos a calcular precio total
                //position = table.getSelectedRow();
                // traigo valor de cantidad [3]
                String cant = table.getValueAt(position, 3).toString();
                if (!cant.equals("")) { // columna cantidad no nula
                    double cantAux = validacion.solomoney(cant);
                    // R:[5]  = [3] * [4]
                    double precUnit = validacion.solomoney(table.getValueAt(position, 4).toString());
                    table.setValueAt(String.valueOf(precUnit), position, 4); // pongo el valor de validaciones

                    double presiTot = (double) Math.round((cantAux * precUnit) * 100d) / 100d; // solo 2 decimales
                    table.setValueAt(String.valueOf(presiTot), position, 5); //R: pongo el valor 
                    table.setValueAt(String.valueOf(cantAux), position, 3); // pongo el valor de validaciones

                    acumSubTot += presiTot;
                }// verificacion de columna cantidad no nula   

            }
            // devuelve el subtotal
            acumSubTot = (double) Math.round((acumSubTot) * 100d) / 100d; // solo 2 decimales
            jTextField6.setText(String.valueOf(acumSubTot));
        }
    }

    // funcion que desabilita componentes --> claro si viene la orden de apus
    public void setClickResumenApus() {
        jPanel1.setVisible(false);
        jTextField4.setVisible(false);
        jButton2.setVisible(false);
        jTextField5.setVisible(false);
    }

    private void calIvaAndTot() {
        // valor IVA
        int iva = validacion.soloNumero(jTextField9.getText());
        //System.out.println("iva " + iva);
        jTextField9.setText(String.valueOf(iva));

        // valor de subtotal
        double subTot = validacion.solomoney(jTextField6.getText());
        //System.out.println("subTot " + subTot);
        // donde va el valor de calIva = iva * subtotal
        double iva1 = Double.parseDouble(jTextField9.getText()) / 100;
        //System.out.println("iva /100 " + iva1);
        double calIva = (double) Math.round(((iva1) * subTot) * 100d) / 100d;
        //System.out.println("calIva " + calIva);
        jTextField7.setText(String.valueOf(calIva));

        // colocamos el valor total
        double presiTot = (double) Math.round((subTot + calIva) * 100d) / 100d; // solo 2 decimales
        jTextField8.setText(String.valueOf(presiTot));

        setDatosFrmApusWithPresupuestp();
    }

    // cuando vengo de APUS update datos
    List<EsquemaPresupuesto> aux = new ArrayList<>();

    private void setDatosFrmApusWithPresupuestp() {
        String[] ss = new String[3];
        ss[0] = jTextField1.getText();
        ss[1] = jTextField2.getText();
        ss[2] = jTextField3.getText();
        FrmApus.auxT = ss;

        if (!aux.isEmpty()) {
            aux.clear();
        }
        int size = table.getRowCount();
        EsquemaPresupuesto entity = null;
        for (int i = 0; i < size; ++i) {
            entity = new EsquemaPresupuesto();
            String codigo = table.getValueAt(i, 0).toString().trim();
            if (codigo.length() > 0) {
                entity.setCodigo(Double.parseDouble(table.getValueAt(i, 0).toString().trim()));
            }
            //entity.setCabeceraTitulo(ss);
            entity.setRubro(table.getValueAt(i, 1).toString());
            entity.setUnidad(table.getValueAt(i, 2).toString());
            String auxStr = table.getValueAt(i, 3).toString();
            if (auxStr.equals("")) {

            } else {
                entity.setCantidad(Double.parseDouble(table.getValueAt(i, 3).toString()));
            }
            entity.setPreUnit(table.getValueAt(i, 4).toString());
            entity.setPreTotM(table.getValueAt(i, 5).toString());

            aux.add(entity);
            entity = null;
        }

        FrmApus.auxResPresu = aux;

    }

    // ESQUEMA LISTA DEL PRESUPUESTO MAMUAL
    private EsquemaPresupuestoManual getEsquemaPresupuestoManual() {
        // clase MAIN
        EsquemaPresupuestoManual entity = new EsquemaPresupuestoManual();
        // los datos de cabecera y footer del presupuesto manual
        entity.setCampo1(jTextField1.getText());
        entity.setCampo2(jTextField2.getText());
        entity.setCampo3(jTextField3.getText());
        entity.setCampo4(jTextField13.getText());
        entity.setOferta(jTextField4.getText());
        entity.setFecha(jTextField5.getText());

        entity.setSubtotal(jTextField6.getText());
        entity.setIva(jTextField9.getText());
        entity.setSubtotalIva(jTextField7.getText());
        entity.setTotal(jTextField8.getText());

        // la lista de la notas
        int sizeNotas = jTable1.getRowCount();
        if (sizeNotas > 0) {
            List<String> not = new ArrayList<>();
            for (int q = 0; q < sizeNotas; ++q) {
                //String nta = jTable1.getValueAt(q, 0).toString();
                if (jTable1.getValueAt(q, 0).toString() != null || !jTable1.getValueAt(q, 0).toString().equals("")) {
                    not.add(jTable1.getValueAt(q, 0).toString());
                }
            }
            // agrego las notas al entity
            entity.setNota(not);
        }

        // clase para almacenar los datos de la tabla
        List<EsquemaPresupuestoManualTabla> dt = new ArrayList<>();
        // entidad de la lista  *** crear otra clase aparte para saltar el error
        EsquemaPresupuestoManualTabla dtoTable = null;

        // atributo para almacenar cuantos registros hay en la tabla
        int sizeColumRows = table.getRowCount();
        if (sizeColumRows > 0) {
            for (int i = 0; i < sizeColumRows; ++i) {
                dtoTable = new EsquemaPresupuestoManualTabla();
                dtoTable.setNumeracion(table.getValueAt(i, 0).toString());
                dtoTable.setDescripcion(table.getValueAt(i, 1).toString());
                dtoTable.setUnidad(table.getValueAt(i, 2).toString());
                dtoTable.setCantidad(table.getValueAt(i, 3).toString());
                dtoTable.setPreUnit(table.getValueAt(i, 4).toString());
                dtoTable.setPreTot(table.getValueAt(i, 5).toString());
                // agrego a la lista de la tabla
                dt.add(dtoTable);
                dtoTable = null;
            }
        }
        // agrego la lista al esquema principal que es entity
        entity.setListTbl(dt);
        //System.out.println("entity " + entity.toString());
        return entity;
    }
    // EXPORTAR PRESUPUESTO / OFERTA :::: MANUALMENTE
    // LOGICA:: ACUMULADOR DE NUMERACION
    //       :: VERIFICAR SI EL DATO DE DESCRIPCION ES UN SUBTITULO
    //       :: NO PONER VALOR EN SI ES EN SUBTITULO

    private String Exportar(File archivo, EsquemaPresupuestoManual datos) {
        String respuesta = "Falla en la generación del PRESUPUESTO.";
        if (archivo.getName().endsWith("xls")) {
            wb = new HSSFWorkbook();
        } else {
            wb = new XSSFWorkbook();
        }

        // hoja para el resumen de los apus
        Sheet hoja = wb.createSheet("PRESUPUESTO");

        // fuente solo tama�o 10 sin segrita
        Font fontGene = wb.createFont();
        fontGene.setFontHeightInPoints((short) 10);
        // fuente negrita de tama�o 10
        Font fontNeg = wb.createFont();
        fontNeg.setBoldweight(Font.BOLDWEIGHT_BOLD);
        fontNeg.setFontHeightInPoints((short) 10);

        // cabecera de la tabla
        Font headerCabe = wb.createFont();
        //headerCab.setBoldweight(Font.BOLDWEIGHT_BOLD);
        CellStyle styleCabe = wb.createCellStyle();
        styleCabe.setFillPattern(CellStyle.SOLID_FOREGROUND);
        styleCabe.setFillForegroundColor(IndexedColors.LEMON_CHIFFON.getIndex());
        styleCabe.setBorderTop(CellStyle.BORDER_THIN);
        styleCabe.setBorderBottom(CellStyle.BORDER_THIN);
        styleCabe.setBorderRight(CellStyle.BORDER_THIN);
        styleCabe.setBorderLeft(CellStyle.BORDER_THIN);
        styleCabe.setAlignment(CellStyle.ALIGN_CENTER/* CellStyle.ALIGN_CENTER*/);
        styleCabe.setVerticalAlignment(CellStyle.VERTICAL_JUSTIFY);
        headerCabe.setFontHeightInPoints((short) 10);
        styleCabe.setFont(headerCabe);

        // body de las tablas
        CellStyle styleTitlIzqGene = wb.createCellStyle();
        styleTitlIzqGene.setFillPattern(CellStyle.SOLID_FOREGROUND);
        styleTitlIzqGene.setFillForegroundColor(IndexedColors.WHITE.getIndex());
        styleTitlIzqGene.setBorderTop(CellStyle.BORDER_THIN);
        styleTitlIzqGene.setBorderBottom(CellStyle.BORDER_THIN);
        styleTitlIzqGene.setBorderRight(CellStyle.BORDER_THIN);
        styleTitlIzqGene.setBorderLeft(CellStyle.BORDER_THIN);
        styleTitlIzqGene.setAlignment(CellStyle.ALIGN_LEFT);
        styleTitlIzqGene.setFont(fontGene);

        CellStyle styleTitlDerGene = wb.createCellStyle();
        styleTitlDerGene.setFillPattern(CellStyle.SOLID_FOREGROUND);
        styleTitlDerGene.setFillForegroundColor(IndexedColors.WHITE.getIndex());
        styleTitlDerGene.setBorderTop(CellStyle.BORDER_THIN);
        styleTitlDerGene.setBorderBottom(CellStyle.BORDER_THIN);
        styleTitlDerGene.setBorderRight(CellStyle.BORDER_THIN);
        styleTitlDerGene.setBorderLeft(CellStyle.BORDER_THIN);
        styleTitlDerGene.setAlignment(CellStyle.ALIGN_RIGHT);
        styleTitlDerGene.setFont(fontGene);

        CellStyle styleTitlIzq = wb.createCellStyle();
        styleTitlIzq.setAlignment(CellStyle.ALIGN_LEFT/* CellStyle.ALIGN_CENTER*/);
        styleTitlIzq.setBorderTop(CellStyle.BORDER_THIN);
        styleTitlIzq.setBorderBottom(CellStyle.BORDER_THIN);
        styleTitlIzq.setBorderRight(CellStyle.BORDER_THIN);
        styleTitlIzq.setBorderLeft(CellStyle.BORDER_THIN);
        styleTitlIzq.setFont(fontNeg);

        // la cabecera 
        CellStyle styleTitle = wb.createCellStyle();
        Font headerTitle = wb.createFont();
        headerTitle.setBoldweight(Font.BOLDWEIGHT_BOLD);
        headerTitle.setFontHeightInPoints((short) 13);
        styleTitle.setAlignment(CellStyle.ALIGN_CENTER);
        styleTitle.setVerticalAlignment(CellStyle.VERTICAL_JUSTIFY);
        styleTitle.setFont(headerTitle);

        // estilo numero
        CellStyle styleNumero = wb.createCellStyle();
        styleNumero.setBorderTop(CellStyle.BORDER_THIN);
        styleNumero.setBorderBottom(CellStyle.BORDER_THIN);
        styleNumero.setBorderRight(CellStyle.BORDER_THIN);
        styleNumero.setBorderLeft(CellStyle.BORDER_THIN);
        styleNumero.setDataFormat(wb.createDataFormat().getFormat("0.00"));
        styleNumero.setFont(fontGene);

        try {
            // inicio de insertar imagen
            // read the image to the stream
            String url_imagen = System.getProperty("user.dir") + "\\resource\\img\\inghisa2.png";
            final FileInputStream stream
                    = new FileInputStream(url_imagen);
            final CreationHelper helper = wb.getCreationHelper();
            final Drawing drawing = hoja.createDrawingPatriarch();
            final ClientAnchor anchor = helper.createClientAnchor();
            anchor.setAnchorType(ClientAnchor.MOVE_AND_RESIZE);
            final int pictureIndex = wb.addPicture(IOUtils.toByteArray(stream), Workbook.PICTURE_TYPE_PNG);
            anchor.setCol1(1); // lado
            anchor.setCol2(0);
            anchor.setRow1(0); // arriba
            anchor.setRow2(0);
            final Picture pict = drawing.createPicture(anchor, pictureIndex);
            pict.resize(2);

            int sizePresupuesto = 14 + datos.getListTbl().size() + datos.getNota().size() + 5;

            int acumPosition = 0;
            boolean bandera1 = false;
            boolean bandera2 = false;
            boolean bandera3 = false;
            boolean bandera4 = false;
            boolean bandera5 = false;
            boolean bandera6 = false;

            int position = 0;

            for (int re = 0; re < sizePresupuesto; ++re) {
                Row fila = hoja.createRow(re);
                if (re == 0) {
                    Cell celda = fila.createCell(1);
                    hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 11));
                    celda.setCellValue("");
                }

                if (re == 1) {
                    for (int j = 1; j < 12; j++) {
                        Cell celda2 = fila.createCell(j);
                        celda2.setCellStyle(styleTitle);
                        if (j == 1) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 11));
                            celda2.setCellValue(datos.getCampo1());
                        }
                    }
                }

                if (re == 2) {
                    for (int j = 1; j < 12; j++) {
                        Cell celda2 = fila.createCell(j);
                        celda2.setCellStyle(styleTitle);
                        if (j == 1) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 11));
                            celda2.setCellValue(datos.getCampo2());
                        }
                    }
                }

                if (re == 3) {
                    for (int j = 1; j < 12; j++) {
                        Cell celda2 = fila.createCell(j);
                        celda2.setCellStyle(styleTitle);
                        if (j == 1) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 11));
                            celda2.setCellValue("TABLA DE CANTIDADES REALES");
                        }
                    }
                }

                if (re == 4) {
                    for (int j = 1; j < 12; j++) {
                        Cell celda2 = fila.createCell(j);
                        //celda2.setCellStyle(styleTitle);
                        if (j == 1) {
                            celda2.setCellValue("Sr.");
                        }
                        if (j == 2) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 2, 5));
                            celda2.setCellValue(datos.getCampo4());
                        }
                    }
                }

                if (re == 5) {
                    for (int j = 1; j < 12; j++) {
                        Cell celda2 = fila.createCell(j);
                        if (j == 1) {
                            //hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 2));
                            celda2.setCellValue(datos.getOferta());
                        }
                        if (j == 9) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 9, 11));
                            celda2.setCellValue(datos.getFecha());
                        }
                    }
                }

                if (re == 6) {
                    for (int j = 1; j < 12; j++) {
                        Cell celda2 = fila.createCell(j);
                        celda2.setCellStyle(styleTitle);
                        if (j == 1) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 11));
                            celda2.setCellValue(datos.getCampo3());
                        }
                    }
                }

                // cabecera  tabla
                if (re == 7) {
                    for (int j = 1; j < 12; j++) {
                        Cell celda = fila.createCell(j);
                        celda.setCellStyle(styleCabe);
                        if (j == 1) {
                            hoja.setColumnWidth((short) j, 620);
                            celda.setCellValue(cabeceraResumenApus[0]);
                            hoja.autoSizeColumn((short) j, true);
                        }
                        if (j == 2) {
                            hoja.addMergedRegion(new CellRangeAddress(re, re, 2, 7));
                            celda.setCellValue(cabeceraResumenApus[1]);
                        }
                        if (j == 8) {
                            celda.setCellValue(cabeceraResumenApus[2]);
                        }
                        if (j == 9) {
                            celda.setCellValue(cabeceraResumenApus[3]);
                        }
                        if (j == 10) {
                            hoja.setColumnWidth((short) j, 620);
                            celda.setCellValue(cabeceraResumenApus[4]);
                            hoja.autoSizeColumn((short) j, true);
                        }
                        if (j == 11) {
                            hoja.setColumnWidth((short) j, 620);
                            celda.setCellValue(cabeceraResumenApus[5]);
                            hoja.autoSizeColumn((short) j, true);
                        }
                    }
                }

                // body de la tabla
                if (re == 8) {
                    position = re;
                    int sizePresuRes = datos.getListTbl().size();
                    for (int size = 0; size < sizePresuRes; ++size) {
                        fila = hoja.createRow(re);
                        for (int j = 1; j < 12; j++) {
                            Cell celda2 = fila.createCell(j);
                            celda2.setCellStyle(styleTitlDerGene);
                            if (j == 1) {
                                celda2.setCellStyle(styleTitlDerGene);
                                String aux = datos.getListTbl().get(size).getNumeracion().trim();
                                if (aux.equals("")) {
                                    celda2.setCellValue("");
                                    celda2.setCellStyle(styleTitlDerGene);
                                } else {
                                    celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    celda2.setCellValue(Double.parseDouble(datos.getListTbl().get(size).getNumeracion().trim()));
                                    celda2.setCellStyle(styleTitlDerGene);
                                }
                            } else if (j == 2) {
                                celda2.setCellStyle(styleTitlIzqGene);
                                hoja.addMergedRegion(new CellRangeAddress(re, re, 2, 7));
                                celda2.setCellValue(datos.getListTbl().get(size).getDescripcion());
                            } else if (j == 8) {
                                celda2.setCellStyle(styleTitlIzqGene);
                                celda2.setCellValue(datos.getListTbl().get(size).getUnidad());
                            } else if (j == 9) {
                                String aux = datos.getListTbl().get(size).getCantidad().trim();
                                if (aux.equals("")) {
                                    celda2.setCellValue("");
                                } else {
                                    celda2.setCellValue(Double.parseDouble(datos.getListTbl().get(size).getCantidad().trim()));
                                    celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    celda2.setCellStyle(styleNumero);
                                }
                            } else if (j == 10) {
                                String aux = datos.getListTbl().get(size).getPreUnit();
                                if (aux.equals("")) {
                                    celda2.setCellValue("");
                                } else {
                                    celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    celda2.setCellValue(Double.parseDouble(datos.getListTbl().get(size).getPreUnit()));
                                    celda2.setCellStyle(styleNumero);
                                }

                            } else if (j == 11) {
                                String aux = datos.getListTbl().get(size).getPreTot();
                                if (aux.equals("")) {
                                    celda2.setCellValue("");
                                } else {
                                    //celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                    String strFormula = "SUM(J" + (re + 1) + "*K" + (re + 1) + ")";
                                    celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                    celda2.setCellFormula(strFormula);
                                    celda2.setCellValue(Double.parseDouble(datos.getListTbl().get(size).getPreTot()));
                                    celda2.setCellStyle(styleNumero);
                                }
                            }
                        }
                        re++;
                    }
                    acumPosition = re;
                    bandera1 = true;
                }

                // footer del presumen 
                if (bandera1 == true) {
                    if (re == acumPosition) {
                        //System.out.println("nueva position bandera1 " + acumPosition);
                        //System.out.println("re  " + re);
                        fila = hoja.createRow(re);
                        for (int j = 1; j < 12; j++) {
                            Cell celda2 = fila.createCell(j);
                            // VALORES
                            if (j == 9) {
                                celda2.setCellStyle(styleTitlIzq);
                                hoja.addMergedRegion(new CellRangeAddress(re, re, 9, 10));
                                celda2.setCellValue("SUBTOTAL");
                            }
                            if (j == 10) {
                                celda2.setCellStyle(styleTitlIzq);
                            }
                            if (j == 11) {
                                /*celda2.setCellStyle(styleTitlDerGene);
                                celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                celda2.setCellValue(Double.parseDouble(datos.getSubtotal()));*/

                                String strFormula = "SUM(L" + (position + 1) + ":L" + ((position) + datos.getListTbl().size()) + ")";
                                celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                celda2.setCellFormula(strFormula);
                                celda2.setCellStyle(styleNumero);

                            }
                            // FIN VALORES
                        }
                        acumPosition++;
                        re++;
                    }
                    bandera1 = false;
                    bandera2 = true;
                } // fin bandera

                if (bandera2 == true) {
                    if (re == acumPosition) {
                        double porc = 0.0;
                        //System.out.println("nueva position bandera2 " + acumPosition);
                        //System.out.println("re  " + re);
                        fila = hoja.createRow(re);
                        for (int j = 1; j < 12; j++) {
                            Cell celda2 = fila.createCell(j);
                            // VALORES
                            if (j == 9) {
                                celda2.setCellStyle(styleTitlIzq);
                                hoja.addMergedRegion(new CellRangeAddress(re, re, 9, 10));
                                celda2.setCellValue("IVA " + datos.getIva() + "%");
                                porc = Double.parseDouble(datos.getIva());
                            }
                            if (j == 10) {
                                celda2.setCellStyle(styleTitlIzq);
                            }
                            if (j == 11) {
                                /*celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                celda2.setCellStyle(styleTitlDerGene);
                                celda2.setCellValue(Double.parseDouble(datos.getSubtotalIva()));*/
                                //porc = porc / 100;
                                String strFormula = "SUM(L" + (re) + "*" + porc + "%)";
                                celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                celda2.setCellFormula(strFormula);
                                celda2.setCellStyle(styleNumero);
                            }
                            // FIN VALORES
                        }
                        acumPosition++;
                        re++;
                    }
                    bandera2 = false;
                    bandera3 = true;
                }

                if (bandera3 == true) {
                    if (re == acumPosition) {
                        fila = hoja.createRow(re);
                        for (int j = 1; j < 12; j++) {
                            Cell celda2 = fila.createCell(j);
                            // VALORES
                            if (j == 9) {
                                celda2.setCellStyle(styleTitlIzq);
                                hoja.addMergedRegion(new CellRangeAddress(re, re, 9, 10));
                                celda2.setCellValue("TOTAL");
                            }
                            if (j == 10) {
                                celda2.setCellStyle(styleTitlIzq);
                            }
                            if (j == 11) {
                                /*celda2.setCellType(Cell.CELL_TYPE_NUMERIC);
                                celda2.setCellStyle(styleTitlDerGene);
                                celda2.setCellValue(Double.parseDouble(datos.getTotal()));*/

                                String strFormula = "SUM(L" + (re - 1) + ":L" + (re) + ")";
                                celda2.setCellType(Cell.CELL_TYPE_FORMULA);
                                celda2.setCellFormula(strFormula);
                                celda2.setCellStyle(styleNumero);
                            }
                            // FIN VALORES
                        }
                        acumPosition++;
                        re++;
                    }
                    bandera3 = false;
                    bandera4 = true;
                }

                //// LA NOTA cabecera
                if (bandera4 == true) {
                    if (re == acumPosition) {
                        fila = hoja.createRow(re);
                        Cell celda = fila.createCell(1);
                        hoja.addMergedRegion(new CellRangeAddress(re, re, 1, 6));
                        celda.setCellValue("Nota: En esta oferta no se incluye lo siguiente: ");
                    }
                    acumPosition++;
                    re++;
                    bandera4 = false;
                    bandera5 = true;
                }
                // nota cuerpo
                if (bandera5 == true) {
                    if (re == acumPosition) {
                        /// examinar
                        int sizePresuRes = datos.getNota().size();
                        for (int size = 0; size < sizePresuRes; ++size) {
                            fila = hoja.createRow(re);
                            for (int j = 1; j < 12; j++) {
                                Cell celda2 = fila.createCell(j);
                                //celda2.setCellStyle(styleTitlIzqGene);
                                if (j == 2) {
                                    hoja.addMergedRegion(new CellRangeAddress(re, re, 2, 7));
                                    celda2.setCellValue(datos.getNota().get(size));
                                }
                            }
                            re++;
                        }
                        acumPosition++;
                    }
                    bandera5 = false;
                    bandera6 = true;
                }

                // footer
                /*
                if (bandera6 == true) {
                    if (re == acumPosition) {
                        System.out.println("re ini " + re);
                        /// examinar
                        int sizePresuRes = 2;
                        for (int size = 0; size < sizePresuRes; ++size) {
                            fila = hoja.createRow(re);
                            Cell celda2 = fila.createCell(0);
                            celda2.setCellValue("");
                            re++;
                        }

                        System.out.println("re desc for " + re);
                        // datos
                        sizePresuRes = 2;
                        for (int size = 0; size < sizePresuRes; ++size) {
                            fila = hoja.createRow(re);

                            if (size == 0) {
                                CellStyle styleFirma = wb.createCellStyle();
                                styleFirma.setBorderTop(CellStyle.BORDER_THIN);
                                styleFirma.setAlignment(CellStyle.ALIGN_LEFT);
                                styleFirma.setFont(fontNeg);
                                for (int j = 1; j < 12; j++) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(styleFirma);
                                    if (j == 2) {
                                        hoja.addMergedRegion(new CellRangeAddress(re, re, 2, 3));
                                        celda2.setCellValue("Ing. Justo Moran P");
                                    }

                                    if (j == 3 || j == 4 || j == 5) {
                                        celda2.setCellValue("");
                                    }

                                }
                            }

                            if (size == 1) {
                                fila = hoja.createRow(re);
                                for (int j = 1; j < 12; j++) {
                                    Cell celda2 = fila.createCell(j);
                                    celda2.setCellStyle(styleTitlIzqGene);
                                    if (j == 2) {
                                        hoja.addMergedRegion(new CellRangeAddress(re, re, 2, 3));
                                        celda2.setCellValue("Gerente General");
                                    }
                                    if (j == 3 || j == 4 || j == 5) {
                                        celda2.setCellValue("");
                                    }
                                }
                            }
                            re++;
                        }
                    }
                    bandera6 = false;
                }*/

            } // FIN FOR
            wb.write(new FileOutputStream(archivo));

            // save a la base de datos
            saveDbFile(datos, wb);

            respuesta = "Exportación exitosa.";

            // vacio la instancia de datos.
            datos = null;
        } catch (IOException | NumberFormatException e) {
            e.getMessage();
            //System.out.println("err-FrmApusPresupuesto " + e.getMessage());
        }
        return respuesta;
    }

    private void saveDbFile(EsquemaPresupuestoManual datos, Workbook wb) {
        int id_pk = 0;
        final String pathFile = System.getProperty("user.dir") + "\\resource\\filePresupuesto\\";
        String name = "";
        // la entidad que sera guardada en la base de datos
        try {
            // convertimos las listas en json
            Gson gson = new Gson();
            String formatoJSONPresupuesto = gson.toJson(datos);
            dtos = new Presupuesto();
            dtos.setEmpresa(jTextField1.getText());
            dtos.setProyecto(jTextField2.getText());
            dtos.setOferta(jTextField4.getText());

            dtos.setId_usuario(Integer.parseInt(home.jLabel2.getText()));

            // lo id_apus & id_manual
            // si jTextField11 != Id Apus...
            if (!jTextField11.getText().equals("Id Apus...")) {
                //System.out.println("vvvIF " + jTextField11.getText());
                dtos.setId_apus(Integer.parseInt(jTextField11.getText()));
                dtos.setId_manual(0);
            } else {
                //System.out.println("vvv " + jTextField11.getText());
                dtos.setId_apus(0);
                dtos.setId_manual(Integer.parseInt(jTextField12.getText()));
            }

            dtos.setDatosPrespuesto(formatoJSONPresupuesto);

            id_pk = ctrPres.ingresar(dtos);
            // update el url_file ::: name
            name = "Presupuesto00" + id_pk + ".xlsx";
            dtos.setId(id_pk);
            dtos.setUrl_file(name);
            ctrPres.actualizarUrlFile(dtos);

            // ultimo necesito el id de presupúesto
            File archivo = new File(pathFile + name);
            FileOutputStream out = new FileOutputStream(archivo);
            wb.write(out);
            out.close();

            dtos = null;

        } catch (Exception e) {
            System.err.println("ERROR AL CREAR EL ARCHIVO!");
            e.printStackTrace();
        }
    }

    // devuleve el presupuesto creado
    private void importDtsPresup(String txt) {
        // vaciamos las tablas
        int sizeTblBody = table.getRowCount();
        int sizeTblNot = jTable1.getRowCount();
        clearCompImport(sizeTblBody, sizeTblNot);

        String id_user = home.jLabel2.getText();
        List<Presupuesto> aux = ctrPres.getPresupuestoByID(txt, id_user);
        addImportDtos(aux);

        jTextField11.setText("Id Apus...");

    }

    private void addImportDtos(List<Presupuesto> aux) {
        Gson gson = null;
        if (!aux.isEmpty()) {
            gson = new Gson();
            Type tipoObjeto = new TypeToken<EsquemaPresupuestoManual>() {
            }.getType();

            EsquemaPresupuestoManual dto = gson.fromJson(convertString(aux), tipoObjeto);
            //System.out.println("gggg " + dto.toString());
            jTextField1.setText(dto.getCampo1());
            jTextField2.setText(dto.getCampo2());
            jTextField3.setText(dto.getCampo3());
            
            jTextField13.setText(dto.getCampo4());

            jTextField4.setText(dto.getOferta());
            jTextField5.setText(dto.getFecha());

            jTextField6.setText(dto.getSubtotal());
            jTextField7.setText(dto.getSubtotalIva());
            jTextField8.setText(dto.getTotal());
            jTextField9.setText(dto.getIva());

            List<EsquemaPresupuestoManualTabla> listTbl = dto.getListTbl();
            DefaultTableModel modelo = (DefaultTableModel) table.getModel();
            Object[] fila = null;
            for (EsquemaPresupuestoManualTabla list : listTbl) {
                //Sección 2
                fila = new Object[6];
                //Sección 3
                fila[0] = list.getNumeracion();
                fila[1] = list.getDescripcion();
                fila[2] = list.getUnidad();
                fila[3] = list.getCantidad();
                fila[4] = list.getPreUnit();
                fila[5] = list.getPreTot();
                //Sección 4
                modelo.addRow(fila);
                fila = null;
            }
            //Sección 5
            table.setModel(modelo);

            // 
            DefaultTableModel modelo1 = (DefaultTableModel) jTable1.getModel();
            List<String> nota = dto.getNota();
            for (String string : nota) {
                fila = new Object[1];
                fila[0] = string;
                //Sección 4
                modelo1.addRow(fila);
                fila = null;
            }
            //Sección 5
            jTable1.setModel(modelo1);
        }

    }

    private void clearCompImport(int sizeTblBody, int sizeTblNot) {
        if (sizeTblBody > 0) {
            DefaultTableModel model1 = (DefaultTableModel) table.getModel();
            model1.setRowCount(0);
        }
        if (sizeTblNot > 0) {
            DefaultTableModel model1 = (DefaultTableModel) jTable1.getModel();
            model1.setRowCount(0);
        }
    }

    private String convertString(List<Presupuesto> aux) {
        String listAux = "";
        for (Presupuesto item : aux) {
            listAux = item.getDatosPrespuesto();
        }
        return listAux;
    }

    // devuelve presupuesto segun apus
    private void importPresuSgnAPUS(String txt) {
        // vaciamos las tablas
        int sizeTblBody = table.getRowCount();
        int sizeTblNot = jTable1.getRowCount();
        clearCompImport(sizeTblBody, sizeTblNot);

        // verificamos que no haiga presupuesto segun apus
        int valor = ctrPres.getCountApusByPresupuesto(txt);
        //System.out.println("dto " + valor);
        String id_user = home.jLabel2.getText();
        if (valor == 0) {

            List<Presupuesto> aux = ctrPres.getPresupuestoByApusID(txt, id_user);
            addImportDtos(aux);
            jTextField4.setEditable(false);
            //jTextField11.setEditable(false); // id apus
        } else {
            // traigo los datos sumando otra revision
            String ofrt = "OFERTA: INGEHISA 00" + txt + " - REV 00" + (valor + 1);

            List<Presupuesto> aux = ctrPres.getPresupuestoByID_Apus(txt, id_user);
            addImportDtos(aux);

            jTextField4.setText(ofrt);
            jTextField4.setEditable(false);
            jTextField12.setText(" 1 | 0");
            //JOptionPane.showMessageDialog(null, "Realizando resivión siguiente de APUS");
        }
    }

}

/*  para pensar como meter todo los datos en un string y para llenar el formulario hacer el proceso de iterar
https://stackoverflow.com/questions/25771822/how-to-convert-arraylist-to-json-in-java

agregar un boton que diga nueva oferta
ese boton hara el proceso de consultar a la base de datos el numero de oferta y pondra el numero de oferta sgt
y llenara el jtxtfield oferta con el nuevo codigo


logica para controlar las versiones
boton Revisar :: abre un popup y lista todo los presupuestos con sus versiones
campos ::  oferta   |   oferta versiones 

el usuario debera colocar la ultima version si la tiene y si no pondra la oferta como tal para crear una version nueva

el llenado de los datos sera mediate el jtxtfield oferta tipo busqueda con el evento keypress

en evento keypress hacer una variable global y sobreescribir el id de la oferta o presupuesto
para que luego ese id pase al presupuesto version
si se realiza el proceso de update, pondre un identificador para controlar la insercion y saber a que tabla voy a 
almacenar 

si btn nueva oferta identificador : new :  metodo insertPresupuesto

si es con evento jtxtfield identificador : update : metodo insertPresupuestoVersion


      ******************************************************
NOTA:  no olvidar hacer la copia del archivo que se exporta a una ruta la cual sera el url_file 


OFERTA: INGEHISA:001 - V:000

https://www.youtube.com/watch?v=4Lj36wbywp8

 */
